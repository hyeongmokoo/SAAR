<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Accord.Imaging</name>
    </assembly>
    <members>
        <member name="T:Accord.Imaging.CornerFeaturePoint">
            <summary>
              Corner feature point.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.IFeaturePoint">
            <summary>
              Common interface for feature points.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.IFeaturePoint`1">
            <summary>
              Common interface for feature points.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.IFeatureDescriptor`1">
            <summary>
              Common interface for feature descriptors.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.IFeatureDescriptor`1.Descriptor">
            <summary>
              Gets or sets the descriptor vector
              associated with this point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.IFeaturePoint`1.X">
            <summary>
              Gets or sets the x-coordinate of this point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.IFeaturePoint`1.Y">
            <summary>
              Gets or sets the y-coordinate of this point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.CornerFeaturePoint.#ctor(AForge.IntPoint)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.CornerFeaturePoint"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.CornerFeaturePoint.X">
            <summary>
              Gets the X position of the point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.CornerFeaturePoint.Y">
            <summary>
              Gets the Y position of the point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.CornerFeaturePoint.Descriptor">
            <summary>
              Gets the descriptor vector
              associated with this point.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.GrayLevelRunLengthMatrix">
            <summary>
              Gray-Level Run-Length Matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.GrayLevelRunLengthMatrix.#ctor(Accord.Imaging.CooccurrenceDegree)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.GrayLevelDifferenceMethod"/> class.
            </summary>
            
            <param name="degree">The direction at which the co-occurrence should be found.</param>
            
        </member>
        <member name="M:Accord.Imaging.GrayLevelRunLengthMatrix.#ctor(Accord.Imaging.CooccurrenceDegree,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.GrayLevelDifferenceMethod"/> class.
            </summary>
            
            <param name="degree">The direction at which the co-occurrence should be found.</param>
            <param name="autoGray">Whether the maximum value of gray should be
              automatically computed from the image. Default is true.</param>
            
        </member>
        <member name="M:Accord.Imaging.GrayLevelRunLengthMatrix.Compute(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the Gray-level Run-length for the given image source.
            </summary>
            
            <param name="source">The source image.</param>
            
            <returns>An array of run-length vectors containing level counts
              for every width pixel in <paramref name="source"/>.</returns>
            
        </member>
        <member name="P:Accord.Imaging.GrayLevelRunLengthMatrix.AutoGray">
            <summary>
              Gets or sets whether the maximum value of gray should be
              automatically computed from the image. If set to false,
              the maximum gray value will be assumed 255.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.GrayLevelRunLengthMatrix.Degree">
            <summary>
              Gets or sets the direction at which the co-occurrence should be found.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.GrayLevelRunLengthMatrix.Primitives">
            <summary>
              Gets the number of primitives found in the last 
              call to <see cref="M:Accord.Imaging.GrayLevelRunLengthMatrix.Compute(AForge.Imaging.UnmanagedImage)"/>.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.Kuwahara">
            <summary>
              Kuwahara filter.
            </summary>
            
            <example>
            <code>
              Bitmap image = ... // Lena's famous picture
            
              // Create a new Kuwahara filter
              Kuwahara kuwahara = new Kuwahara();
            
              // Apply the Kuwahara filter
              Bitmap result = kuwahara.Apply(image);
              
              // Show on the screen
              ImageBox.Show(result);
            </code>
            </example>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Kuwahara.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.Kuwahara"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Kuwahara.ProcessFilter(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Kuwahara.Size">
            <summary>
              Gets the size of the kernel used in the Kuwahara filter. This
              should be odd and greater than or equal to five. Default is 5.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Kuwahara.BlockSize">
            <summary>
              Gets the size of each of the four inner blocks used in the
              Kuwahara filter. This is always half the <see cref="P:Accord.Imaging.Filters.Kuwahara.Size">
              kernel size</see> minus one.
            </summary>
            
            <value>
              The size of the each inner block, or <c>k / 2 - 1</c> 
              where <c>k</c> is the kernel size.
            </value>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Kuwahara.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.WhitePatch">
            <summary>
              White Patch filter for color normalization.
            </summary>
            
            <example>
            <code>
              Bitmap image = ... // Lena's famous picture
            
              // Create the White Patch filter
              var whitePatch = new WhitePatch();
            
              // Apply the filter
              Bitmap result = grayWorld.Apply(image);
              
              // Show on the screen
              ImageBox.Show(result);
            </code>
            
            <para>
              The resulting image is shown below. </para>
              
            <img src="..\images\white-patch.png" /> 
            </example>
            
        </member>
        <member name="M:Accord.Imaging.Filters.WhitePatch.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.WhitePatch"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.WhitePatch.ProcessFilter(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.WhitePatch.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Converters.ImageToMatrix">
             <summary>
               Bitmap to multidimensional matrix converter.
             </summary>
             
             <remarks>
               This class converts images to multidimensional matrices of
               either double-precision or single-precision floating-point
               values.
             </remarks>
             
             <example>
             <para>
               This example converts a 16x16 Bitmap image into
               a double[,] array with values between 0 and 1.</para>
               
             <code>
             // Obtain an image
             // Bitmap image = ...
            
             // Show on screen
             ImageBox.Show(image, PictureBoxSizeMode.Zoom);
            
             // Create the converter to convert the image to a
             //  matrix containing only values between 0 and 1 
             ImageToMatrix conv = new ImageToMatrix(min: 0, max: 1);
            
             // Convert the image and store it in the matrix
             double[,] matrix; conv.Convert(image, out matrix);
            
             // Show the matrix on screen as an image
             ImageBox.Show(matrix, PictureBoxSizeMode.Zoom);
             </code>
             <para>
               The resulting image is shown below.</para>
             
             <img src="..\images\image-to-matrix.png" />
             
             <para>
               Additionally, the image can also be shown in alternative
               representations such as text or data tables.
             </para>
             
             <code>
             // Show the matrix on screen as a .NET multidimensional array
             MessageBox.Show(matrix.ToString(CSharpMatrixFormatProvider.InvariantCulture));
            
             // Show the matrix on screen as a table
             DataGridBox.Show(matrix, nonBlocking: true)
                 .SetAutoSizeColumns(DataGridViewAutoSizeColumnsMode.Fill)
                 .SetAutoSizeRows(DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders)
                 .SetDefaultFontSize(5)
                .WaitForClose();
             </code>
             
              <para>
               The resulting images are shown below.</para>
               
             <img src="..\images\image-to-matrix-string.png" />
             <img src="..\images\image-to-matrix-table.png" />
             
             </example>
             
        </member>
        <member name="T:Accord.Imaging.Converters.IConverter`2">
            <summary>
              Public interface for image converter algorithms.
            </summary>
            
            <typeparam name="TInput">Input image type.</typeparam>
            <typeparam name="TOutput">Output image type.</typeparam>
            
        </member>
        <member name="M:Accord.Imaging.Converters.IConverter`2.Convert(`0,`1@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ImageToMatrix"/> class.
            </summary>
            
            <param name="min">
              The minimum double value in the double array
              associated with the darkest color. Default is 0.
            </param>
            <param name="max">
              The maximum double value in the double array
              associated with the brightest color. Default is 1.
            </param>
            <param name="channel">The channel to extract. Default is 0.</param>
              
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ImageToMatrix"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ImageToMatrix"/> class.
            </summary>
            
            <param name="min">
              The minimum double value in the double array
              associated with the darkest color. Default is 0.
            </param>
            <param name="max">
              The maximum double value in the double array
              associated with the brightest color. Default is 1.
            </param>
              
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.Convert(System.Drawing.Bitmap,System.Double[0:,0:]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.Convert(System.Drawing.Bitmap,System.Single[0:,0:]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.Convert(System.Drawing.Bitmap,System.Byte[0:,0:]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.Convert(AForge.Imaging.UnmanagedImage,System.Double[0:,0:]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.Convert(AForge.Imaging.UnmanagedImage,System.Single[0:,0:]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToMatrix.Convert(AForge.Imaging.UnmanagedImage,System.Byte[0:,0:]@)">
            <summary>
              Converts an image from one representation to another. When
              converting to byte, the <see cref="P:Accord.Imaging.Converters.ImageToMatrix.Max"/> and <see cref="P:Accord.Imaging.Converters.ImageToMatrix.Min"/>
              are ignored.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ImageToMatrix.Max">
            <summary>
              Gets or sets the maximum double value in the
              double array associated with the brightest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ImageToMatrix.Min">
            <summary>
              Gets or sets the minimum double value in the
              double array associated with the darkest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ImageToMatrix.Channel">
            <summary>
              Gets or sets the channel to be extracted.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.RansacFundamentalEstimator">
            <summary>
              RANSAC Robust Fundamental Matrix Estimator.
            </summary>
            
            <remarks>
            <para>
              Fitting a fundamental using RANSAC is pretty straightforward. Being a iterative method,
              in a single iteration a random sample of four correspondences is selected from the 
              given correspondence points and a transformation F is then computed from those points.</para>
            <para>
              After a given number of iterations, the iteration which produced the largest number
              of inliers is then selected as the best estimation for H.</para>  
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  P. D. Kovesi. MATLAB and Octave Functions for Computer Vision and Image Processing.
                  School of Computer Science and Software Engineering, The University of Western Australia.
                  Available in: <a href="http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Projective/fundmatrix.m">
                  http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Projective/fundmatrix.m </a> </description></item>
                <item><description>
                  E. Dubrofsky. Homography Estimation. Master thesis. Available on:
                  http://www.cs.ubc.ca/~dubroe/courses/MastersEssay.pdf </description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.RansacFundamentalEstimator.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new RANSAC homography estimator.
            </summary>
            
            <param name="threshold">Inlier threshold.</param>
            <param name="probability">Inlier probability.</param>
            
        </member>
        <member name="M:Accord.Imaging.RansacFundamentalEstimator.Estimate(AForge.IntPoint[],AForge.IntPoint[])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacFundamentalEstimator.Estimate(AForge.Point[],AForge.Point[])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacFundamentalEstimator.Estimate(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The fundamental matrix relating x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacFundamentalEstimator.fundamental(System.Int32[])">
            <summary>
              Estimates a fundamental matrix with the given points.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.RansacFundamentalEstimator.distance(System.Single[0:,0:],System.Double)">
            <summary>
              Compute inliers using the Symmetric Transfer Error,
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.RansacFundamentalEstimator.Ransac">
            <summary>
              Gets the RANSAC estimator used.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.RansacFundamentalEstimator.Inliers">
            <summary>
              Gets the final set of inliers detected by RANSAC.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Converters.MatrixToImage">
            <summary>
              Multidimensional array to Bitmap converter.
            </summary>
            
            <remarks>
              This class can convert double and float multidimensional arrays
              (matrices) to Grayscale bitmaps. The color representation of the
              values contained in the matrices must be specified through the 
              Min and Max properties of the class or class constructor.
            </remarks>
            
            <example>
            <para>
              This example converts a multidimensional array of double-precision
              floating-point numbers with values from 0 to 1 into a grayscale image.</para>
              
            <code>
            // Create a matrix representation 
            // of a 4x4 image with a inner 2x2
            // square drawn in the middle
            
            double[,] pixels = 
            {
                 { 0, 0, 0, 0 },
                 { 0, 1, 1, 0 },
                 { 0, 1, 1, 0 },
                 { 0, 0, 0, 0 },
            };
            
            // Create the converter to convert the matrix to a image
            MatrixToImage conv = new MatrixToImage(min: 0, max: 1);
            
            // Declare an image and store the pixels on it
            Bitmap image; conv.Convert(pixels, out image);
            
            // Show the image on screen
            image = new ResizeNearestNeighbor(320, 320).Apply(image);
            ImageBox.Show(image, PictureBoxSizeMode.Zoom);
            </code>
            
            <para>
              The resulting image is shown below.</para>
              
            <img src="..\images\matrix-to-image.png" />
            
            </example>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.MatrixToImage"/> class.
            </summary>
            
            <param name="min">
              The minimum double value in the double array
              associated with the darkest color. Default is 0.
            </param>
            <param name="max">
              The maximum double value in the double array
              associated with the brightest color. Default is 1.
            </param>
              
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.MatrixToImage"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.Convert(System.Double[0:,0:],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.Convert(System.Single[0:,0:],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.Convert(System.Double[0:,0:],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.Convert(System.Single[0:,0:],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.Convert(System.Byte[0:,0:],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.MatrixToImage.Convert(System.Byte[0:,0:],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="P:Accord.Imaging.Converters.MatrixToImage.Max">
            <summary>
              Gets or sets the maximum double value in the
              double array associated with the brightest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.MatrixToImage.Min">
            <summary>
              Gets or sets the minimum double value in the
              double array associated with the darkest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.MatrixToImage.Format">
            <summary>
              Gets or sets the desired output format of the image.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.CorrelationMatching">
             <summary>
               Maximum cross-correlation feature point matching algorithm.
             </summary>
             
             <remarks>
               <para>
                 This class matches feature points by using a maximum cross-correlation measure.</para>
               <para>
                 References:
                 <list type="bullet">
                   <item><description>
                     P. D. Kovesi. MATLAB and Octave Functions for Computer Vision and Image Processing.
                     School of Computer Science and Software Engineering, The University of Western Australia.
                     Available in: <a href="http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Match/matchbycorrelation.m">
                     http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Match/matchbycorrelation.m </a>
                   </description></item>
                   <item><description>
                     <a href="http://www.instructor.com.br/unesp2006/premiados/PauloHenrique.pdf">
                     http://www.instructor.com.br/unesp2006/premiados/PauloHenrique.pdf </a>
                   </description></item>
                   <item><description>
                     <a href="http://siddhantahuja.wordpress.com/2010/04/11/correlation-based-similarity-measures-summary/">
                     http://siddhantahuja.wordpress.com/2010/04/11/correlation-based-similarity-measures-summary/ </a>
                   </description></item>
               </list></para>
             </remarks>
            
             <seealso cref="T:Accord.Imaging.RansacHomographyEstimator"/>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.#ctor(System.Int32)">
            <summary>
              Constructs a new Correlation Matching algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.#ctor(System.Int32,System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
              Constructs a new Correlation Matching algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a new Correlation Matching algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.#ctor(System.Int32,System.Double,System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
              Constructs a new Correlation Matching algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.Match(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Collections.Generic.IEnumerable{AForge.IntPoint},System.Collections.Generic.IEnumerable{AForge.IntPoint})">
            <summary>
              Matches two sets of feature points computed from the given images.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.Match(System.Collections.Generic.IEnumerable{AForge.IntPoint},System.Collections.Generic.IEnumerable{AForge.IntPoint})">
            <summary>
              Matches two sets of feature points computed from the given images.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.Match(System.Drawing.Bitmap,System.Drawing.Bitmap,AForge.IntPoint[],AForge.IntPoint[])">
            <summary>
              Matches two sets of feature points computed from the given images.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.Match(AForge.IntPoint[],AForge.IntPoint[])">
            <summary>
              Matches two sets of feature points computed from the given images.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.CorrelationMatching.computeCorrelationMatrix(System.Drawing.Bitmap,AForge.IntPoint[],System.Drawing.Bitmap,AForge.IntPoint[],System.Int32,System.Double)">
            <summary>
              Constructs the correlation matrix between selected points from two images.
            </summary>
            
            <remarks>
              Rows correspond to points from the first image, columns correspond to points
              in the second.
            </remarks>
            
        </member>
        <member name="P:Accord.Imaging.CorrelationMatching.DistanceMax">
            <summary>
              Gets or sets the maximum distance to consider
              points as correlated.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.CorrelationMatching.WindowSize">
            <summary>
              Gets or sets the size of the correlation window.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.HighBoost">
            <summary>
              High boost filter.
            </summary>
            
            <remarks>
            <para>
              The High-boost filter can be used to emphasize high frequency
              components (i.e. points of contrast) without removing the low
              frequency ones.</para>
              
            <para>
             This filter implementation has been contributed by Diego Catalano.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.Filters.HighBoost.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.HighBoost"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.HighBoost.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.HighBoost"/> class.
            </summary>
            
            <param name="boost">The boost value. Default is 8.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.HighBoost.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.HighBoost"/> class.
            </summary>
            
            <param name="boost">The boost value. Default is 8.</param>
            <param name="size">The kernel size. Default is 3.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.HighBoost.Size">
            <summary>
            Kernel size, [3, 21].
            </summary>
            
            <remarks><para>Size of Gaussian kernel.</para>
            
            <para>Default value is set to <b>5</b>.</para>
            </remarks>
            
        </member>
        <member name="P:Accord.Imaging.Filters.HighBoost.Boost">
            <summary>
              Gets or sets the boost value. Default is 9.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.IntegralImage2">
            <summary>
              Joint representation of both Integral Image and Squared Integral Image.
            </summary>
            
            <remarks>
              Using this representation, both structures can be created in a single pass
              over the data. This is interesting for real time applications. This class
              also accepts a channel parameter indicating the Integral Image should be
              computed using a specified color channel. This avoids costly conversions.
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Integral image of the given size.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(System.Drawing.Bitmap)">
            <summary>
              Constructs a new Integral image from a Bitmap image.
            </summary>
            
            <param name="image">The source image from where the integral image should be computed.</param>
            
            <returns>
              The <see cref="T:Accord.Imaging.IntegralImage2"/> representation of 
              the <paramref name="image">source image</paramref>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Constructs a new Integral image from a Bitmap image.
            </summary>
            
            <param name="image">The source image from where the integral image should be computed.</param>
            <param name="channel">The image channel to consider in the computations. Default is 0.</param>
            
            <returns>
              The <see cref="T:Accord.Imaging.IntegralImage2"/> representation of 
              the <paramref name="image">source image</paramref>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(System.Drawing.Bitmap,System.Boolean)">
            <summary>
              Constructs a new Integral image from a Bitmap image.
            </summary>
            
            <param name="image">The source image from where the integral image should be computed.</param>
            <param name="computeTilted"><c>True</c> to compute the tilted version of the integral image,
              <c>false</c> otherwise. Default is false.</param>
            
            <returns>
              The <see cref="T:Accord.Imaging.IntegralImage2"/> representation of 
              the <paramref name="image">source image</paramref>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(System.Drawing.Bitmap,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Integral image from a Bitmap image.
            </summary>
            
            <param name="image">The source image from where the integral image should be computed.</param>
            <param name="channel">The image channel to consider in the computations. Default is 0.</param>
            <param name="computeTilted"><c>True</c> to compute the tilted version of the integral image,
              <c>false</c> otherwise. Default is false.</param>
              
            <returns>
              The <see cref="T:Accord.Imaging.IntegralImage2"/> representation of 
              the <paramref name="image">source image</paramref>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(System.Drawing.Imaging.BitmapData)">
            <summary>
              Constructs a new Integral image from a BitmapData image.
            </summary>
            
            <param name="imageData">The source image from where the integral image should be computed.</param>
            
            <returns>
              The <see cref="T:Accord.Imaging.IntegralImage2"/> representation of 
              the <paramref name="imageData">source image</paramref>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(System.Drawing.Imaging.BitmapData,System.Int32)">
            <summary>
              Constructs a new Integral image from a BitmapData image.
            </summary>
            
            <param name="imageData">The source image from where the integral image should be computed.</param>
            <param name="channel">The image channel to consider in the computations. Default is 0.</param>
            
            <returns>
              The <see cref="T:Accord.Imaging.IntegralImage2"/> representation of 
              the <paramref name="imageData">source image</paramref>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(System.Drawing.Imaging.BitmapData,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Integral image from a BitmapData image.
            </summary>
            
            <param name="imageData">The source image from where the integral image should be computed.</param>
            <param name="channel">The image channel to consider in the computations. Default is 0.</param>
            <param name="computeTilted"><c>True</c> to compute the tilted version of the integral image,
              <c>false</c> otherwise. Default is false.</param>
              
            <returns>
              The <see cref="T:Accord.Imaging.IntegralImage2"/> representation of 
              the <paramref name="imageData">source image</paramref>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
              Constructs a new Integral image from a BitmapData image.
            </summary>
            
            <param name="imageData">The source image from where the integral image should be computed.</param>
            <param name="computeTilted"><c>True</c> to compute the tilted version of the integral image,
              <c>false</c> otherwise. Default is false.</param>
            
            <returns>
              The <see cref="T:Accord.Imaging.IntegralImage2"/> representation of 
              the <paramref name="imageData">source image</paramref>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(AForge.Imaging.UnmanagedImage,System.Int32)">
            <summary>
              Constructs a new Integral image from an unmanaged image.
            </summary>
            
            <param name="image">The source image from where the integral image should be computed.</param>
            <param name="channel">The image channel to consider in the computations. Default is 0.</param>
            
            <returns>
              The <see cref="T:Accord.Imaging.IntegralImage2"/> representation of 
              the <paramref name="image">source image</paramref>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(AForge.Imaging.UnmanagedImage)">
            <summary>
              Constructs a new Integral image from an unmanaged image.
            </summary>
            
            <param name="image">The source image from where the integral image should be computed.</param>
            
            <returns>
              The <see cref="T:Accord.Imaging.IntegralImage2"/> representation of 
              the <paramref name="image">source image</paramref>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(AForge.Imaging.UnmanagedImage,System.Boolean)">
            <summary>
              Constructs a new Integral image from an unmanaged image.
            </summary>
            
            <param name="image">The source image from where the integral image should be computed.</param>
            <param name="computeTilted"><c>True</c> to compute the tilted version of the integral image,
              <c>false</c> otherwise. Default is false.</param>
              
            <returns>
              The <see cref="T:Accord.Imaging.IntegralImage2"/> representation of 
              the <paramref name="image">source image</paramref>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.FromBitmap(AForge.Imaging.UnmanagedImage,System.Int32,System.Boolean)">
            <summary>
              Constructs a new Integral image from an unmanaged image.
            </summary>
            
            <param name="image">The source image from where the integral image should be computed.</param>
            <param name="channel">The image channel to consider in the computations. Default is 0.</param>
            <param name="computeTilted"><c>True</c> to compute the tilted version of the integral image,
              <c>false</c> otherwise. Default is false.</param>
            
            <returns>
              The <see cref="T:Accord.Imaging.IntegralImage2"/> representation of 
              the <paramref name="image">source image</paramref>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.GetSum(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Gets the sum of the pixels in a rectangle of the Integral image.
            </summary>
            
            <param name="x">The horizontal position of the rectangle <c>x</c>.</param>
            <param name="y">The vertical position of the rectangle <c>y</c>.</param>
            <param name="height">The rectangle's height <c>h</c>.</param>
            <param name="width">The rectangle's width <c>w</c>.</param>
            
            <returns>The sum of all pixels contained in the rectangle, computed
              as I[y, x] + I[y + h, x + w] - I[y + h, x] - I[y, x + w].</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.GetSum2(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Gets the sum of the squared pixels in a rectangle of the Integral image.
            </summary>
            
            <param name="x">The horizontal position of the rectangle <c>x</c>.</param>
            <param name="y">The vertical position of the rectangle <c>y</c>.</param>
            <param name="height">The rectangle's height <c>h</c>.</param>
            <param name="width">The rectangle's width <c>w</c>.</param>
            
            <returns>The sum of all pixels contained in the rectangle, computed
              as I²[y, x] + I²[y + h, x + w] - I²[y + h, x] - I²[y, x + w].</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.GetSumT(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Gets the sum of the pixels in a tilted rectangle of the Integral image.
            </summary>
            
            <param name="x">The horizontal position of the rectangle <c>x</c>.</param>
            <param name="y">The vertical position of the rectangle <c>y</c>.</param>
            <param name="height">The rectangle's height <c>h</c>.</param>
            <param name="width">The rectangle's width <c>w</c>.</param>
            
            <returns>The sum of all pixels contained in the rectangle, computed
              as T[y + w, x + w + 1] + T[y + h, x - h + 1] - T[y, x + 1] - T[y + w + h, x + w - h + 1].</returns>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing,
              releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.Finalize">
            <summary>
              Releases unmanaged resources and performs other cleanup operations 
              before the <see cref="T:Accord.Imaging.IntegralImage2"/> is reclaimed by garbage collection.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IntegralImage2.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources
            </summary>
            
            <param name="disposing"><c>true</c> to release both managed 
            and unmanaged resources; <c>false</c> to release only unmanaged
            resources.</param>
            
        </member>
        <member name="P:Accord.Imaging.IntegralImage2.Width">
            <summary>
              Gets the image's width.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.IntegralImage2.Height">
            <summary>
              Gets the image's height.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.IntegralImage2.Image">
            <summary>
              Gets the Integral Image for values' sum.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.IntegralImage2.Squared">
            <summary>
              Gets the Integral Image for values' squared sum.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.IntegralImage2.Rotated">
            <summary>
              Gets the Integral Image for tilted values' sum.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.FastRetinaKeypointPattern.Scales">
            <summary>
              Pattern scale resolution.
            </summary>
        </member>
        <member name="F:Accord.Imaging.FastRetinaKeypointPattern.Orientations">
            <summary>
              Pattern orientation resolution.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.FastRetinaKeypointPattern.Points">
            <summary>
              Number of pattern points.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.FastRetinaKeypointPattern.Size">
            <summary>
              Smallest keypoint size.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.FastRetinaKeypointPattern.lookupTable">
            <summary>
              Look-up table for the pattern points (position + 
              sigma of all points at all scales and orientation)
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.FastRetinaKeypointDescriptorType">
            <summary>
              SURF Feature descriptor types.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.FastRetinaKeypointDescriptorType.None">
            <summary>
              Do not compute descriptors.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.FastRetinaKeypointDescriptorType.Standard">
            <summary>
              Compute standard 512-bit descriptors.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.FastRetinaKeypointDescriptorType.Extended">
            <summary>
              Compute extended 1024-bit descriptors.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.FastRetinaKeypointDetector">
            <summary>
              Fast Retina Keypoint (FREAK) detector.
            </summary>
            
            <remarks>
              The FREAK algorithm is a binary based interest point descriptor algorithm
              that relies in another corner 
            </remarks>
            
            <example>
            <para>
              In the following example, we will see how can we extract binary descriptor
              vectors from a given image using the Fast Retina Keypoint Detector together
              a FAST corners detection algorithm.</para>
            
            <code>
            Bitmap lena = Resources.lena512;
            
            // The freak detector can be used with any other corners detection
            // algorithm. The default corners detection method used is the FAST
            // corners detection. So, let's start creating this detector first:
            //
            var detector = new FastCornersDetector(60);
            
            // Now that we have a corners detector, we can pass it to the FREAK
            // feature extraction algorithm. Please note that if we leave this
            // parameter empty, FAST will be used by default.
            //
            var freak = new FastRetinaKeypointDetector(detector);
            
            // Now, all we have to do is to process our image:
            List&lt;FastRetinaKeypoint&gt; points = freak.ProcessImage(lena);
            
            // Afterwards, we should obtain 83 feature points. We can inspect
            // the feature points visually using the FeaturesMarker class as
            //
            FeaturesMarker marker = new FeaturesMarker(points, scale: 20);
                        
            // And showing it on screen with
            ImageBox.Show(marker.Apply(lena));
            
            // We can also inspect the feature vectors (descriptors) associated
            // with each feature point. In order to get a descriptor vector for
            // any given point, we can use
            //
            byte[] feature = points[42].Descriptor;
                        
            // By default, feature vectors will have 64 bytes in length. We can also
            // display those vectors in more readable formats such as HEX or base64
            //
            string hex = points[42].ToHex();
            string b64 = points[42].ToBase64();
            
            // The above base64 result should be:
            //
            //  "3W8M/ev///ffbr/+v3f34vz//7X+f0609v//+++/1+jfq/e83/X5/+6ft3//b4uaPZf7ePb3n/P93/rIbZlf+g=="
            //
            </code>
            
            <para>
              The resulting image is shown below:</para>
            
              <img src="..\images\freak.png"/>
              
            </example>
            
            <seealso cref="T:Accord.Imaging.FastCornersDetector"/>
            <seealso cref="T:Accord.Imaging.HistogramsOfOrientedGradients"/>
            <seealso cref="T:Accord.Imaging.LocalBinaryPattern"/>
            
        </member>
        <member name="T:Accord.Imaging.IFeatureDetector`2">
            <summary>
              Common interface for feature detectors.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IFeatureDetector`2.ProcessImage(System.Drawing.Bitmap)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IFeatureDetector`2.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IFeatureDetector`2.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypointDetector.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.FastRetinaKeypointDetector"/> class.
            </summary>
            
            <param name="threshold">The detection threshold for the 
            <see cref="T:Accord.Imaging.FastCornersDetector">FAST detector</see>.</param>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypointDetector.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.FastRetinaKeypointDetector"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypointDetector.#ctor(AForge.Imaging.ICornersDetector)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.FastRetinaKeypointDetector"/> class.
            </summary>
            
            <param name="detector">A corners detector.</param>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypointDetector.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypointDetector.GetDescriptor">
            <summary>
              Gets the <see cref="T:Accord.Imaging.FastRetinaKeypointDescriptor">
              feature descriptor</see> for the last processed image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypointDetector.ProcessImage(System.Drawing.Bitmap)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypointDetector.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypointDetector.Detector">
            <summary>
              Gets the corners detector used to generate features.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypointDetector.ComputeDescriptors">
            <summary>
              Gets or sets a value indicating whether all feature points
              should have their descriptors computed after being detected.
              Default is to compute standard descriptors.
            </summary>
            
            <value><c>true</c> if to compute orientation; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypointDetector.Octaves">
            <summary>
              Gets or sets the number of octaves to use when 
              building the feature descriptor. Default is 4.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypointDetector.Scale">
            <summary>
              Gets or sets the scale used when building 
              the feature descriptor. Default is 0.22f.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.NiblackThreshold">
            <summary>
              Niblack Threshold.
            </summary>
            
            <remarks>
              <para>
              The Niblack filter is a local thresholding algorithm that separates
              white and black pixels given the local mean and standard deviation
              for the current window.</para>
              
            <para>
             This filter implementation has been contributed by Diego Catalano.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                   W. Niblack, An Introduction to Digital Image Processing, pp. 115-116.
                   Prentice Hall, 1986.</description></item>
              </list></para>   
            </remarks>
            
            <example>
            <code>
            Bitmap image = ... // Lena's picture
            
            // Create a new Niblack threshold:
            var niblack = new NiblackThreshold();
            
            // Compute the filter
            Bitmap result = niblack.Apply(image);
            
            // Show on the screen
            ImageBox.Show(result);
            </code>
            
            <para>
              The resulting image is shown below:</para>
            
              <img src="..\images\niblack.png"/>
            
            </example>
            
            <seealso cref="T:Accord.Imaging.Filters.SauvolaThreshold"/>
            
        </member>
        <member name="M:Accord.Imaging.Filters.NiblackThreshold.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.NiblackThreshold"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.NiblackThreshold.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.NiblackThreshold.Radius">
            <summary>
              Gets or sets the filter convolution
              radius. Default is 15.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.NiblackThreshold.K">
            <summary>
              Gets or sets the user-defined 
              parameter k. Default is 0.2.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.NiblackThreshold.C">
            <summary>
              Gets or sets the mean offset C. This value should
              be between 0 and 255. The default value is 0.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.NiblackThreshold.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.IContourExtractionAlgorithm">
            <summary>
              Common interface for contour extraction algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.IContourExtractionAlgorithm.FindContour(System.Drawing.Bitmap)">
            <summary>
              Extracts the contour from a single object in a grayscale image.
            </summary>
            <param name="image">A grayscale image.</param>
            <returns>A list of <see cref="T:AForge.IntPoint"/>s defining a contour.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IContourExtractionAlgorithm.FindContour(System.Drawing.Imaging.BitmapData)">
            <summary>
              Extracts the contour from a single object in a grayscale image.
            </summary>
            <param name="image">A grayscale image.</param>
            <returns>A list of <see cref="T:AForge.IntPoint"/>s defining a contour.</returns>
            
        </member>
        <member name="M:Accord.Imaging.IContourExtractionAlgorithm.FindContour(AForge.Imaging.UnmanagedImage)">
            <summary>
              Extracts the contour from a single object in a grayscale image.
            </summary>
            <param name="image">A grayscale image.</param>
            <returns>A list of <see cref="T:AForge.IntPoint"/>s defining a contour.</returns>
            
        </member>
        <member name="T:Accord.Imaging.FastCornersDetector">
             <summary>
               Features from Accelerated Segment Test (FAST) corners detector.
             </summary>
             
             <remarks>
             <para>
               In the FAST corner detection algorithm, a pixel is defined as a corner
               if (in a circle surrounding the pixel), N or more contiguous pixels are
               all significantly brighter then or all significantly darker than the center
               pixel. The ordering of questions used to classify a pixel is learned using
               the ID3 algorithm.
             </para>
             
             <para>This detector has been shown to exhibit a high degree of repeatability.</para>
            
             <para>
               The code is roughly based on the 9 valued FAST corner detection
               algorithm implementation in C by Edward Rosten, which has been
               published under a 3-clause BSD license and is freely available at:
               http://svr-www.eng.cam.ac.uk/~er258/work/fast.html. 
             </para>
             
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   E. Rosten, T. Drummond. Fusing Points and Lines for High
                   Performance Tracking, ICCV 2005. </description></item>
                 <item><description>
                   E. Rosten, T. Drummond. Machine learning for high-speed
                   corner detection, ICCV 2005</description></item>
               </list>
             </para>
             </remarks>
             
             <example>
             <code>
             
               Bitmap image = ... // Lena's famous picture
             
               // Create a new FAST Corners Detector
               FastCornersDetector fast = new FastCornersDetector()
               {
                   Suppress = true, // suppress non-maximum points
                   Threshold = 40   // less leads to more corners
               };
             
               // Process the image looking for corners
               List&lt;IntPoint&gt; points = fast.ProcessImage(image);
             
               // Create a filter to mark the corners
               PointsMarker marker = new PointsMarker(points);
                         
               // Apply the corner-marking filter
               Bitmap markers = marker.Apply(image);
             
               // Show on the screen
               ImageBox.Show(markers);
             </code>
             
             <para>
               The resulting image is shown below:</para>
             
               <img src="..\images\fast.png"/>
               
             </example>
             
             <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/>
             <seealso cref="T:Accord.Imaging.FastRetinaKeypointDetector"/>
             
        </member>
        <member name="M:Accord.Imaging.FastCornersDetector.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.FastCornersDetector"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FastCornersDetector.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.FastCornersDetector"/> class.
            </summary>
            
            <param name="threshold">The suppression threshold. Decreasing this value
              increases the number of points detected by the algorithm. Default is 20.</param>
            
        </member>
        <member name="M:Accord.Imaging.FastCornersDetector.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
              Process image looking for corners.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.FastCornersDetector.ProcessImage(System.Drawing.Bitmap)">
            <summary>
              Process image looking for corners.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.FastCornersDetector.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process image looking for corners.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="P:Accord.Imaging.FastCornersDetector.Suppress">
            <summary>
              Gets or sets a value indicating whether non-maximum
              points should be suppressed. Default is true.
            </summary>
            
            <value><c>true</c> if non-maximum points should
              be suppressed; otherwise, <c>false</c>.</value>
              
        </member>
        <member name="P:Accord.Imaging.FastCornersDetector.Threshold">
            <summary>
              Gets or sets the corner detection threshold. Increasing this value results in less corners,
              whereas decreasing this value will result in more corners detected by the algorithm.
            </summary>
            
            <value>The corners threshold.</value>
            
        </member>
        <member name="P:Accord.Imaging.FastCornersDetector.Scores">
            <summary>
              Gets the scores of the each corner detected in
              the previous call to <see cref="M:Accord.Imaging.FastCornersDetector.ProcessImage(System.Drawing.Bitmap)"/>.
            </summary>
            
            <value>The scores of each last computed corner.</value>
            
        </member>
        <member name="T:Accord.Imaging.Filters.Rectification">
            <summary>
              Rectification filter for projective transformation.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Rectification.#ctor(System.Double[0:,0:])">
            <summary>
              Constructs a new Blend filter.
            </summary>
            
            <param name="homography">The homography matrix mapping a second image to the overlay image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Rectification.#ctor(Accord.Imaging.MatrixH)">
            <summary>
              Constructs a new Blend filter.
            </summary>
            
            <param name="homography">The homography matrix mapping a second image to the overlay image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Rectification.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the new image size.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Rectification.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the image filter.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Rectification.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Rectification.Homography">
            <summary>
              Gets or sets the Homography matrix used to map a image passed to
              the filter to the overlay image specified at filter creation.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Rectification.FillColor">
            <summary>
              Gets or sets the filling color used to fill blank spaces.
            </summary>
            
            <remarks>
              The filling color will only be visible after the image is converted
              to 24bpp. The alpha channel will be used internally by the filter.
            </remarks>
            
        </member>
        <member name="T:Accord.Imaging.KNearestNeighborMatching">
             <summary>
               Nearest neighbor feature point matching algorithm.
             </summary>
             
             <remarks>
               <para>
                 This class matches feature points using a <see cref="T:Accord.MachineLearning.KNearestNeighbors">
                 k-Nearest Neighbors</see> algorithm.</para>
             </remarks>
            
             <seealso cref="T:Accord.Imaging.CorrelationMatching"/>
             <seealso cref="T:Accord.Imaging.RansacHomographyEstimator"/>
             
        </member>
        <member name="T:Accord.Imaging.KNearestNeighborMatching`1">
             <summary>
               Nearest neighbor feature point matching algorithm.
             </summary>
             
             <remarks>
               <para>
                 This class matches feature points using a <see cref="T:Accord.MachineLearning.KNearestNeighbors">
                 k-Nearest Neighbors</see> algorithm.</para>
             </remarks>
            
             <seealso cref="T:Accord.Imaging.CorrelationMatching"/>
             <seealso cref="T:Accord.Imaging.RansacHomographyEstimator"/>
             
        </member>
        <member name="M:Accord.Imaging.KNearestNeighborMatching`1.#ctor(System.Int32,System.Func{`0,`0,System.Double})">
            <summary>
              Constructs a new Correlation Matching algorithm.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.KNearestNeighborMatching`1.Match(System.Collections.Generic.IEnumerable{Accord.Imaging.IFeaturePoint{`0}},System.Collections.Generic.IEnumerable{Accord.Imaging.IFeaturePoint{`0}})">
            <summary>
              Matches two sets of feature points.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.KNearestNeighborMatching`1.Match(Accord.Imaging.IFeaturePoint{`0}[],Accord.Imaging.IFeaturePoint{`0}[])">
            <summary>
              Matches two sets of feature points.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.KNearestNeighborMatching`1.match(Accord.Imaging.IFeaturePoint{`0}[],Accord.Imaging.IFeaturePoint{`0}[])">
            <summary>
              Matches two sets of feature points.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.KNearestNeighborMatching`1.K">
            <summary>
              Gets or sets the number k of nearest neighbors.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.KNearestNeighborMatching`1.Distance">
            <summary>
              Gets or sets the distance function used
              as a distance metric between data points.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.KNearestNeighborMatching`1.Threshold">
            <summary>
              Gets or sets a minimum relevance threshold
              used to find matching pairs
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.KNearestNeighborMatching.#ctor(System.Int32)">
            <summary>
              Constructs a new Correlation Matching algorithm.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.Variance">
            <summary>
              Variance filter.
            </summary>
            
            <remarks>
              The Variance filter replaces each pixel in an image by its
              neighborhood variance. The end result can be regarded as an
              border enhancement, making the Variance filter suitable to
              be used as an edge detection mechanism.
            </remarks>
            
            <example>
            <code>
            Bitmap image = ... // Lena's picture
            
            // Create a new Variance filter:
            var variance = new Variance();
            
            // Compute the filter
            Bitmap result = variance.Apply(image);
            
            // Show on the screen
            ImageBox.Show(result);
            </code>
            
            <para>
              The resulting image is shown below:</para>
            
              <img src="..\images\variance.png" />
            
            </example>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Variance.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.Variance"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Variance.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.Variance"/> class.
            </summary>
            
            <param name="radius">The radius neighborhood used to compute a pixel's local variance.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Variance.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Variance.Radius">
            <summary>
              Gets or sets the radius of the neighborhood
              used to compute a pixel's local variance.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Variance.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.RectanglesMarker">
            <summary>
              Filter to mark (highlight) rectangles in a image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.RectanglesMarker.#ctor(System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.RectanglesMarker"/> class.
            </summary>
            
            <param name="markerColor">The color to use to drawn the rectangles.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.RectanglesMarker.#ctor(System.Drawing.Rectangle[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.RectanglesMarker"/> class.
            </summary>
            
            <param name="rectangles">Set of rectangles to be drawn.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.RectanglesMarker.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.Rectangle})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.RectanglesMarker"/> class.
            </summary>
            
            <param name="rectangles">Set of rectangles to be drawn.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.RectanglesMarker.#ctor(System.Collections.Generic.IEnumerable{System.Drawing.Rectangle},System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.RectanglesMarker"/> class.
            </summary>
            
            <param name="rectangles">Set of rectangles to be drawn.</param>
            <param name="markerColor">The color to use to drawn the rectangles.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.RectanglesMarker.ProcessFilter(AForge.Imaging.UnmanagedImage)">
            <summary>
              Applies the filter to the image.
            </summary>
        </member>
        <member name="P:Accord.Imaging.Filters.RectanglesMarker.MarkerColor">
            <summary>
              Color used to mark pairs.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.RectanglesMarker.FillColor">
            <summary>
              Gets or sets the color used to fill
              rectangles. Default is Transparent.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.RectanglesMarker.Rectangles">
            <summary>
              The set of rectangles.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.RectanglesMarker.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.FeaturesMarker">
            <summary>
              Filter to mark (highlight) feature points in a image.
            </summary>
            
            <remarks>
            <para>The filter highlights feature points on the image using a given set of points.</para>
            
            <para>The filter accepts 8 bpp grayscale and 24 color images for processing.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.Filters.FeaturesMarker.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.FeaturesMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.FeaturesMarker.#ctor(System.Collections.Generic.IEnumerable{Accord.Imaging.SpeededUpRobustFeaturePoint})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.FeaturesMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.FeaturesMarker.#ctor(System.Collections.Generic.IEnumerable{Accord.Imaging.FastRetinaKeypoint})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.FeaturesMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.FeaturesMarker.#ctor(System.Collections.Generic.IEnumerable{Accord.Imaging.SpeededUpRobustFeaturePoint},System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.FeaturesMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.FeaturesMarker.#ctor(System.Collections.Generic.IEnumerable{Accord.Imaging.FastRetinaKeypoint},System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.FeaturesMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.FeaturesMarker.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
               Process the filter on the specified image.
             </summary>
             
             <param name="sourceData">Source image data.</param>
             <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.FeaturesMarker.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.FeaturesMarker.Scale">
            <summary>
              Gets or sets the initial size for a feature point in the map. Default is 5.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.FeaturesMarker.Points">
            <summary>
              Gets or sets the set of points to mark.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.IFeatureDetector`1">
            <summary>
              Common interface for feature detectors.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Converters.NamespaceDoc">
            <summary>
             Contains classes and methods to convert between different image representations, 
             such as between common images, numeric matrices and arrays.
            </summary>
            
            <remarks>
            <para>
              The image converters are able to convert to and from images defined as <c>byte</c>,
              <c>double</c> and <c>float</c> multi-dimensional matrices, jagged matrices, and even
              images represented as flat arrays. It is also possible to convert images defined as
              series of individual pixel colors into <see cref="T:System.Drawing.Bitmap"/>s, and back from those
              <see cref="T:System.Drawing.Bitmap"/>s into any of the aforementioned representations. Support for
              AForge.NET's UnmanagedImage is also available.
              </para>
              
            <para>
              The namespace class diagram is shown below. </para>
              <img src="..\diagrams\classes\Accord.Imaging.Converters.png"/>
            </remarks>
              
        </member>
        <member name="T:Accord.Imaging.SpeededUpRobustFeaturePoint">
            <summary>
              Speeded-Up Robust Feature (SURF) Point.
            </summary>
            
            <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/>
            <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor"/>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturePoint.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/> class.
            </summary>
            
            <param name="x">The x-coordinate of the point in the image.</param>
            <param name="y">The y-coordinate of the point in the image.</param>
            <param name="scale">The point's scale.</param>
            <param name="laplacian">The point's laplacian value.</param>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturePoint.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/> class.
            </summary>
            
            <param name="x">The x-coordinate of the point in the image.</param>
            <param name="y">The y-coordinate of the point in the image.</param>
            <param name="scale">The point's scale.</param>
            <param name="laplacian">The point's laplacian value.</param>
            <param name="orientation">The point's orientation angle.</param>
            <param name="response">The point's response value.</param>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturePoint.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/> class.
            </summary>
            
            <param name="x">The x-coordinate of the point in the image.</param>
            <param name="y">The y-coordinate of the point in the image.</param>
            <param name="scale">The point's scale.</param>
            <param name="laplacian">The point's Laplacian value.</param>
            <param name="descriptor">The SURF point descriptor.</param>
            <param name="orientation">The point's orientation angle.</param>
            <param name="response">The point's response value.</param>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturePoint.ToIntPoint">
            <summary>
              Converts the feature point to a <see cref="T:AForge.IntPoint"/>.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturePoint.ToPoint">
            <summary>
              Converts this object into a <see cref="T:AForge.IntPoint"/>.
            </summary>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturePoint.ToPointF">
            <summary>
              Converts this object into a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturePoint.op_Implicit(Accord.Imaging.SpeededUpRobustFeaturePoint)~System.Drawing.Point">
            <summary>
              Performs an implicit conversion from <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>
              to <see cref="T:System.Drawing.Point"/>.
            </summary>
            
            <param name="point">The point to be converted.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturePoint.op_Implicit(Accord.Imaging.SpeededUpRobustFeaturePoint)~System.Drawing.PointF">
            <summary>
              Performs an implicit conversion from <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>
              to <see cref="T:System.Drawing.PointF"/>.
            </summary>
            
            <param name="point">The point to be converted.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturePoint.op_Implicit(Accord.Imaging.SpeededUpRobustFeaturePoint)~AForge.IntPoint">
            <summary>
              Performs an implicit conversion from <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>
              to <see cref="T:AForge.IntPoint"/>.
            </summary>
            
            <param name="point">The point to be converted.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.X">
            <summary>
              Gets or sets the x-coordinate of this point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.Y">
            <summary>
              Gets or sets the y-coordinate of this point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.Scale">
            <summary>
              Gets or sets the scale of the point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.Response">
            <summary>
              Gets or sets the response of the detected feature (strength).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.Orientation">
            <summary>
              Gets or sets the orientation of this point
              measured anti-clockwise from the x-axis.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.Laplacian">
            <summary>
              Gets or sets the sign of laplacian for this point
              (which may be useful for fast matching purposes).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturePoint.Descriptor">
            <summary>
              Gets or sets the descriptor vector
              associated with this point.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.WaveletTransform">
            <summary>
              Wavelet transform filter.
            </summary>
            
            <example>
            <code>
            Bitmap image = ... // Lena's famous picture
            
            // Create a new Haar Wavelet transform filter
            var wavelet = new WaveletTransform(new Haar(1));
            
            // Apply the Wavelet transformation
            Bitmap result = wavelet.Apply(image);
            
            // Show on the screen
            ImageBox.Show(result);
            </code>
            
            <para>
              The resulting image is shown below. </para>
              
            <img src="..\images\wavelet-1.png" /> 
            
            <code>
            // Extract only one of the resulting images
            var crop = new Crop(new Rectangle(0, 0, 
                image.Width / 2, image.Height / 2));
            
            Bitmap quarter = crop.Apply(result);
            
            // Show on the screen
            ImageBox.Show(quarter);
            </code>
            
            <para>
              The resulting image is shown below. </para>
              
            <img src="..\images\wavelet-2.png" /> 
            </example>
            
        </member>
        <member name="M:Accord.Imaging.Filters.WaveletTransform.#ctor(Accord.Math.Wavelets.IWavelet)">
            <summary>
              Constructs a new Wavelet Transform filter.
            </summary>
            
            <param name="wavelet">A wavelet function.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.WaveletTransform.#ctor(Accord.Math.Wavelets.IWavelet,System.Boolean)">
            <summary>
              Constructs a new Wavelet Transform filter.
            </summary>
            
            <param name="wavelet">A wavelet function.</param>
            <param name="backward">True to perform backward transform, false otherwise.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.WaveletTransform.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Applies the filter to the image.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.WaveletTransform.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.WaveletTransform.Wavelet">
            <summary>
              Gets or sets the Wavelet function
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.WaveletTransform.Backward">
            <summary>
              Gets or sets whether the filter should be applied forward or backwards.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.ResponseLayerCollection">
            <summary>
              Response filter.
            </summary>
            
            <remarks>
            <para>
              In SURF, the scale-space is divided into a number of octaves,
              where an octave refers to a series of <see cref="T:Accord.Imaging.ResponseLayer"/>
              response maps covering a doubling of scale.</para>
            <para>
              In the traditional approach to constructing a scale-space,
              the image size is varied and the Gaussian filter is repeatedly
              applied to smooth subsequent layers. The SURF approach leaves
              the original image unchanged and varies only the filter size.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.ResponseLayerCollection.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Creates the initial map of responses according to
              the specified number of octaves and initial step.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.ResponseLayerCollection.Update(System.Int32,System.Int32,System.Int32)">
            <summary>
              Updates the response filter definitions
              without recreating objects.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.ResponseLayerCollection.Compute(AForge.Imaging.IntegralImage)">
            <summary>
              Computes the filter using the specified <see cref="T:AForge.Imaging.IntegralImage">
              Integral Image.</see>
            </summary>
            
            <param name="integral">The integral image.</param>
            
        </member>
        <member name="M:Accord.Imaging.ResponseLayerCollection.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.ResponseLayerCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="T:Accord.Imaging.ResponseLayer">
            <summary>
              Response Layer.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.ResponseLayer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.ResponseLayer"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.ResponseLayer.Update(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Updates the response layer definitions
              without recreating objects.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.ResponseLayer.Compute(AForge.Imaging.IntegralImage)">
            <summary>
              Computes the filter for the specified integral image.
            </summary>
            
            <param name="image">The integral image.</param>
            
        </member>
        <member name="P:Accord.Imaging.ResponseLayer.Width">
            <summary>
              Gets the width of the filter.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.ResponseLayer.Height">
            <summary>
              Gets the height of the filter.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.ResponseLayer.Step">
            <summary>
              Gets the filter step.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.ResponseLayer.Size">
            <summary>
              Gets the filter size.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.ResponseLayer.Responses">
            <summary>
              Gets the responses computed from the filter.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.ResponseLayer.Laplacian">
            <summary>
              Gets the Laplacian computed from the filter.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.CooccurrenceDegree">
            <summary>
              Co-occurrence Degree.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.CooccurrenceDegree.Degree0">
            <summary>
              Find co-occurrences at 0° degrees.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.CooccurrenceDegree.Degree45">
            <summary>
              Find co-occurrences at 45° degrees.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.CooccurrenceDegree.Degree90">
            <summary>
              Find co-occurrences at 90° degrees.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.CooccurrenceDegree.Degree135">
            <summary>
              Find co-occurrences at 135° degrees.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.GrayLevelCooccurrenceMatrix">
            <summary>
              Gray-Level Co-occurrence Matrix (GLCM).
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.GrayLevelCooccurrenceMatrix.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.GrayLevelCooccurrenceMatrix"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.GrayLevelCooccurrenceMatrix.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.GrayLevelCooccurrenceMatrix"/> class.
            </summary>
            
            <param name="distance">The distance at which the texture should be analyzed.</param>
            
        </member>
        <member name="M:Accord.Imaging.GrayLevelCooccurrenceMatrix.#ctor(System.Int32,Accord.Imaging.CooccurrenceDegree)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.GrayLevelCooccurrenceMatrix"/> class.
            </summary>
            
            <param name="distance">The distance at which the texture should be analyzed.</param>
            <param name="degree">The direction to look for co-occurrences.</param>
            
        </member>
        <member name="M:Accord.Imaging.GrayLevelCooccurrenceMatrix.#ctor(System.Int32,Accord.Imaging.CooccurrenceDegree,System.Boolean,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.GrayLevelCooccurrenceMatrix"/> class.
            </summary>
            
            <param name="distance">The distance at which the texture should be analyzed.</param>
            <param name="degree">The direction to look for co-occurrences.</param>
            <param name="autoGray">Whether the maximum value of gray should be
              automatically computed from the image. Default is true.</param>
            <param name="normalize">Whether the produced GLCM should be normalized,
              dividing each element by the number of pairs. Default is true.</param>
            
        </member>
        <member name="M:Accord.Imaging.GrayLevelCooccurrenceMatrix.Compute(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the Gray-level Co-occurrence Matrix (GLCM) 
              for the given source image.
            </summary>
            
            <param name="source">The source image.</param>
            
            <returns>A square matrix of double-precision values containing
            the GLCM for the given <paramref name="source"/>.</returns>
            
        </member>
        <member name="M:Accord.Imaging.GrayLevelCooccurrenceMatrix.Compute(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the Gray-level Co-occurrence Matrix for the given matrix.
            </summary>
            
            <param name="source">The source image.</param>
            <param name="region">A region of the source image where
             the GLCM should be computed for.</param>
            
            <returns>A square matrix of double-precision values containing the GLCM for the
              <paramref name="region"/> of the given <paramref name="source"/>.</returns>
            
        </member>
        <member name="P:Accord.Imaging.GrayLevelCooccurrenceMatrix.AutoGray">
            <summary>
              Gets or sets whether the maximum value of gray should be
              automatically computed from the image. If set to false,
              the maximum gray value will be assumed 255.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.GrayLevelCooccurrenceMatrix.Normalize">
            <summary>
              Gets or sets whether the produced GLCM should be normalized,
              dividing each element by the number of pairs. Default is true.
            </summary>
            
            <value>
              <c>true</c> if the GLCM should be normalized; otherwise, <c>false</c>.
            </value>
            
        </member>
        <member name="P:Accord.Imaging.GrayLevelCooccurrenceMatrix.Degree">
            <summary>
              Gets or sets the direction at which the co-occurrence should be found.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.GrayLevelCooccurrenceMatrix.Distance">
            <summary>
              Gets or sets the distance at which the 
              texture should be analyzed. Default is 1.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.GrayLevelCooccurrenceMatrix.Pairs">
            <summary>
              Gets the number of pairs registered during the
              last <see cref="M:Accord.Imaging.GrayLevelCooccurrenceMatrix.Compute(AForge.Imaging.UnmanagedImage)">computed GLCM</see>.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.FeatureDescriptor">
            <summary>
              Standard feature descriptor for <see cref="T:double[]" /> feature vectors.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor.#ctor(System.Double[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.FeatureDescriptor"/> structure.
            </summary>
            
            <param name="value">The feature vector.</param>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor.op_Implicit(System.Double[])~Accord.Imaging.FeatureDescriptor">
            <summary>
              Performs an implicit conversion from <see cref="T:double[]"/> 
              to <see cref="T:Accord.Imaging.FeatureDescriptor"/>.
            </summary>
            
            <param name="value">The value to be converted.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor.FromArray(System.Double[])">
            <summary>
              Performs a conversion from <see cref="T:double[]"/> 
              to <see cref="T:Accord.Imaging.FeatureDescriptor"/>.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor.op_Implicit(Accord.Imaging.FeatureDescriptor{System.Double[]})~Accord.Imaging.FeatureDescriptor">
            <summary>
              Performs an implicit conversion from <see cref="T:double[]"/> 
              to <see cref="T:Accord.Imaging.FeatureDescriptor"/>.
            </summary>
            
            <param name="value">The value to be converted.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor.FromGeneric(Accord.Imaging.FeatureDescriptor{System.Double[]})">
            <summary>
              Performs a conversion from <see cref="T:double[]"/> 
              to <see cref="T:Accord.Imaging.FeatureDescriptor"/>.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor.FromValue``1(``0)">
            <summary>
              Performs a conversion from <typeparam name="T"/>
              to <see cref="T:Accord.Imaging.FeatureDescriptor`1"/>.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor.op_Equality(Accord.Imaging.FeatureDescriptor,Accord.Imaging.FeatureDescriptor)">
            <summary>
              Implements the operator ==.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor.op_Inequality(Accord.Imaging.FeatureDescriptor,Accord.Imaging.FeatureDescriptor)">
            <summary>
              Implements the operator !=.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            
            <returns>
              A hash code for this instance, suitable for use in hashing
              algorithms and data structures like a hash table. 
            </returns>
            
        </member>
        <member name="P:Accord.Imaging.FeatureDescriptor.Descriptor">
            <summary>
              Gets or sets the descriptor vector
              associated with this point.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.FeatureDescriptor`1">
            <summary>
              Standard feature descriptor for generic feature vectors.
            </summary>
            
            <typeparam name="T">The type of feature vector, such as <see cref="T:double[]"/>.</typeparam>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor`1.#ctor(`0)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.FeatureDescriptor"/> struct.
            </summary>
            
            <param name="value">The feature vector.</param>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor`1.op_Implicit(`0)~Accord.Imaging.FeatureDescriptor{`0}">
            <summary>
              Performs an implicit conversion from <typeparamref name="T"/>
              to <see cref="T:Accord.Imaging.FeatureDescriptor"/>.
            </summary>
            
            <param name="value">The value to be converted.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor`1.op_Equality(Accord.Imaging.FeatureDescriptor{`0},Accord.Imaging.FeatureDescriptor{`0})">
            <summary>
              Implements the operator ==.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor`1.op_Inequality(Accord.Imaging.FeatureDescriptor{`0},Accord.Imaging.FeatureDescriptor{`0})">
            <summary>
              Implements the operator !=.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor`1.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.FeatureDescriptor`1.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            
            <returns>
              A hash code for this instance, suitable for use in hashing
              algorithms and data structures like a hash table. 
            </returns>
            
        </member>
        <member name="P:Accord.Imaging.FeatureDescriptor`1.Descriptor">
            <summary>
              Gets or sets the descriptor vector
              associated with this point.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.LineMarker">
            <summary>
              Filter to mark (highlight) lines in a image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.LineMarker.#ctor(AForge.Math.Geometry.Line)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.LineMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.LineMarker.#ctor(AForge.Math.Geometry.Line,System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.LineMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.LineMarker.#ctor(AForge.Math.Geometry.Line,System.Drawing.Color,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.LineMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.LineMarker.#ctor(System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.LineMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.LineMarker.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.LineMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.LineMarker.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
               Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.LineMarker.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.LineMarker.MarkerColor">
            <summary>
              Color used to mark corners.
            </summary>
        </member>
        <member name="P:Accord.Imaging.Filters.LineMarker.Line">
            <summary>
              Gets or sets the set of points to mark.
            </summary>
        </member>
        <member name="P:Accord.Imaging.Filters.LineMarker.Width">
            <summary>
              Gets or sets the width of the points to be drawn.
            </summary>
        </member>
        <member name="T:Accord.Imaging.Moments.RawMoments">
             <summary>
               Raw image moments.
             </summary>
             
             <remarks>
             <para>
               In image processing, computer vision and related fields, an image moment is
               a certain particular weighted average (moment) of the image pixels' intensities,
               or a function of such moments, usually chosen to have some attractive property 
               or interpretation.</para>
            
             <para>
               Image moments are useful to describe objects after segmentation. Simple properties 
               of the image which are found via image moments include area (or total intensity), 
               its centroid, and information about its orientation.</para>
               
             <para>
               The raw moments are the most basic moments which can be computed from an image,
               and can then be further processed to achieve <see cref="T:Accord.Imaging.Moments.CentralMoments"/> or even
               <see cref="T:Accord.Imaging.Moments.HuMoments"/>.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Wikipedia contributors. "Image moment." Wikipedia, The Free Encyclopedia. Wikipedia,
                   The Free Encyclopedia. Available at http://en.wikipedia.org/wiki/Image_moment </description></item>
               </list>
             </para>
             </remarks>
             
             <example>
             <code>
             Bitmap image = ...;
            
             // Compute the raw moments of up to third order
             RawMoments m = new RawMoments(image, order: 3);
             </code>
             </example>
             
             <seealso cref="T:Accord.Imaging.Moments.HuMoments"/>
             <seealso cref="T:Accord.Imaging.Moments.CentralMoments"/>
             
        </member>
        <member name="T:Accord.Imaging.Moments.MomentsBase">
            <summary>
              Base class for image moments.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.#ctor(System.Int32)">
             <summary>
               Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.MomentsBase"/> class.
             </summary>
             
             <param name="order">The maximum order for the moments.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.#ctor(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32)">
             <summary>
               Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.MomentsBase"/> class.
             </summary>
             
             <param name="order">The maximum order for the moments.</param>
             <param name="image">The image whose moments should be computed.</param>
             <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.#ctor(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.MomentsBase"/> class.
            </summary>
            
            <param name="order">The maximum order for the moments.</param>
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.#ctor(System.Single[0:,0:],System.Drawing.Rectangle,System.Int32)">
             <summary>
               Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.MomentsBase"/> class.
             </summary>
             
             <param name="order">The maximum order for the moments.</param>
             <param name="image">The image whose moments should be computed.</param>
             <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.#ctor(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.MomentsBase"/> class.
            </summary>
            
            <param name="order">The maximum order for the moments.</param>
            <param name="image">The image whose moments should be computed.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.#ctor(AForge.Imaging.UnmanagedImage,System.Int32)">
             <summary>
               Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.MomentsBase"/> class.
             </summary>
             
             <param name="order">The maximum order for the moments.</param>
             <param name="image">The image whose moments should be computed.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.#ctor(System.Single[0:,0:],System.Int32)">
             <summary>
               Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.MomentsBase"/> class.
             </summary>
             
             <param name="order">The maximum order for the moments.</param>
             <param name="image">The image whose moments should be computed.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.Compute(System.Drawing.Bitmap)">
            <summary>
              Computes the moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.Compute(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.Compute(System.Drawing.Imaging.BitmapData)">
            <summary>
              Computes the moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.Compute(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
              Computes the moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.Compute(System.Drawing.Imaging.BitmapData,System.Drawing.Rectangle)">
            <summary>
              Computes the moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.Compute(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.MomentsBase.Compute(System.Single[0:,0:],System.Drawing.Rectangle)">
            <summary>
              Computes the moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="P:Accord.Imaging.Moments.MomentsBase.Order">
            <summary>
              Gets or sets the maximum order of the moments.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Moments.IMoments">
            <summary>
              Common interface for image moments.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.IMoments.Compute(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the center moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.IMoments.Compute(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
              Computes the center moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="F:Accord.Imaging.Moments.RawMoments.DefaultOrder">
            <summary>
              Gets the default maximum moment order.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="N:Accord.Imaging.Moments"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.#ctor(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="N:Accord.Imaging.Moments"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.#ctor(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="N:Accord.Imaging.Moments"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.#ctor(System.Single[0:,0:],System.Drawing.Rectangle,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="N:Accord.Imaging.Moments"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.#ctor(AForge.Imaging.UnmanagedImage,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="N:Accord.Imaging.Moments"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.#ctor(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="N:Accord.Imaging.Moments"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.#ctor(System.Single[0:,0:],System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="N:Accord.Imaging.Moments"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.Compute(System.Single[0:,0:],System.Drawing.Rectangle,System.Boolean)">
            <summary>
              Computes the raw moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            <param name="secondOrder"><c>True</c> to compute second order moments, <c>false</c> otherwise.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.Compute(System.Single[0:,0:],System.Drawing.Rectangle)">
            <summary>
              Computes the raw moments for the specified image.
            </summary>
            
            <param name="image">The image.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.Compute(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the raw moments for the specified image.
            </summary>
            
            <param name="image">The image.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.RawMoments.Reset">
            <summary>
              Resets all moments to zero.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M00">
            <summary>
              Raw moment of order (0,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M10">
            <summary>
              Raw moment of order (1,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M01">
            <summary>
              Raw moment of order (0,1).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M11">
            <summary>
              Raw moment of order (1,1).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M20">
            <summary>
              Raw moment of order (2,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M02">
            <summary>
              Raw moment of order (0,2).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M21">
            <summary>
              Raw moment of order (2,1).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M12">
            <summary>
              Raw moment of order (1,2).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M30">
            <summary>
              Raw moment of order (3,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.M03">
            <summary>
              Raw moment of order (0,3).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.InvM00">
            <summary>
              Inverse raw moment of order (0,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.CenterX">
            <summary>
              Gets the X centroid of the image.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.CenterY">
            <summary>
              Gets the Y centroid of the image.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.RawMoments.Area">
            <summary>
              Gets the area (for binary images) or sum of
              gray level (for grayscale images).
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.BagOfVisualWords">
            <summary>
              Bag of Visual Words
            </summary>
            
            <remarks>
            <para>
              The bag-of-words (BoW) model can be used to extract finite
              length features from otherwise varying length representations.
              This class uses the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector">
              SURF features detector</see> to determine a coded representation
              for a given image.</para>
              
            <para>
              It is also possible to use other feature detectors with this
              class. For this, please refer to <see cref="T:Accord.Imaging.BagOfVisualWords`1"/>
              for more details and examples.</para>
            </remarks>
            
            <example>
            <para>  
              The following example shows how to create and use a BoW with
              default parameters. </para>
              
            <code>
              int numberOfWords = 32;
              
              // Create bag-of-words (BoW) with the given number of words
              BagOfVisualWords bow = new BagOfVisualWords(numberOfWords);
              
              // Create the BoW codebook using a set of training images
              bow.Compute(imageArray);
              
              // Create a fixed-length feature vector for a new image
              double[] featureVector = bow.GetFeatureVector(image);
            </code>
            
            <para>  
              By default, the BoW uses K-Means to cluster feature vectors. The next
              example demonstrates how to use a different clustering algorithm when
              computing the BoW. The example will be given using the <see cref="T:Accord.MachineLearning.BinarySplit">
              Binary Split</see> clustering algorithm.</para>
              
            <code>
              int numberOfWords = 32;
              
              // Create an alternative clustering algorithm
              BinarySplit binarySplit = new BinarySplit(numberOfWords);
              
              // Create bag-of-words (BoW) with the clustering algorithm
              BagOfVisualWords bow = new BagOfVisualWords(binarySplit);
              
              // Create the BoW codebook using a set of training images
              bow.Compute(imageArray);
              
              // Create a fixed-length feature vector for a new image
              double[] featureVector = bow.GetFeatureVector(image);
            </code>
            </example>
            
            <seealso cref="T:Accord.Imaging.BagOfVisualWords`1"/>
            
        </member>
        <member name="T:Accord.Imaging.BagOfVisualWords`1">
            <summary>
              Bag of Visual Words
            </summary>
            
            <typeparam name="TPoint">
              The <see cref="T:Accord.Imaging.IFeaturePoint"/> type to be used with this class,
              such as <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>.</typeparam>
            
            <remarks>
            <para>
              The bag-of-words (BoW) model can be used to extract finite
              length features from otherwise varying length representations.
              This class can uses any <see cref="T:Accord.Imaging.IFeatureDetector`1">feature
              detector</see> to determine a coded representation for a given image.</para>
              
            <para>
              For a simpler, non-generic version of the Bag-of-Words model which 
              defaults to the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector">SURF 
              features detector</see>, please see <see cref="T:Accord.Imaging.BagOfVisualWords"/>
            </para>
            </remarks>
            
            <example>
            <para>
              The following example shows how to use a BoW model with the
              <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/>.</para>
              
            <code>
              int numberOfWords = 32;
              
              // Create bag-of-words (BoW) with the given SURF detector
              var bow = new BagOfVisualWords&lt;SpeededUpRobustFeaturePoint&gt;(
                 new SpeededUpRobustFeaturesDetector(), numberOfWords);
              
              // Create the BoW codebook using a set of training images
              bow.Compute(imageArray);
              
              // Create a fixed-length feature vector for a new image
              double[] featureVector = bow.GetFeatureVector(image);
            </code>
            
            <para>
              The following example shows how to create a BoW which works with any
              of corner detector, such as <see cref="T:Accord.Imaging.FastCornersDetector"/>:</para>
              
            <code>
              int numberOfWords = 16;
            
              // Create a corners detector
              MoravecCornersDetector moravec = new MoravecCornersDetector();
              
              // Create an adapter to convert corners to visual features
              CornerFeaturesDetector detector = new CornerFeaturesDetector(moravec);
              
              // Create a bag-of-words (BoW) with the corners detector and number of words
              var bow = new BagOfVisualWords&lt;CornerFeaturePoint&gt;(detector, numberOfWords);
              
              // Create the BoW codebook using a set of training images
              bow.Compute(imageArray);
              
              // Create a fixed-length feature vector for a new image
              double[] featureVector = bow.GetFeatureVector(image);
            </code>
            </example>
            
            <seealso cref="T:Accord.Imaging.BagOfVisualWords"/>
            <seealso cref="T:Accord.Imaging.IFeatureDetector`1"/>
            
            <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/>
            <seealso cref="T:Accord.Imaging.FastRetinaKeypointDetector"/>
            
        </member>
        <member name="T:Accord.Imaging.BagOfVisualWords`2">
             <summary>
               Bag of Visual Words
             </summary>
             
             <typeparam name="TPoint">
               The <see cref="T:Accord.Imaging.IFeaturePoint`1"/> type to be used with this class,
               such as <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>.</typeparam>
             <typeparam name="TFeature">
               The feature type of the <typeparamref name="TPoint"/>, such
               as <see cref="T:double[]"/>.
             </typeparam>
             
             <remarks>
             <para>
               The bag-of-words (BoW) model can be used to extract finite
               length features from otherwise varying length representations.
               This class can uses any <see cref="T:Accord.Imaging.IFeatureDetector`1">feature
               detector</see> to determine a coded representation for a given image.</para>
               
             <para>
               This is the most generic version for the BoW model, which can accept any
               choice of <see cref="T:Accord.Imaging.IFeatureDetector`1"/> for any kind of point,
               even non-numeric ones. This class can also support any clustering algorithm
               as well. </para>
             </remarks>
             
             <example>
             <para>
               In this example, we will create a Bag-of-Words to operate on <c>byte[]</c> vectors,
               which otherwise wouldn't be supported by the simpler BoW version. Those byte vectors
               are composed of binary features detected by a <see cref="T:Accord.Imaging.FastRetinaKeypointDetector"/>.
               In order to cluster those features, we will be using a <see cref="T:Accord.MachineLearning.KModes`1"/>
               algorithm with a matching template argument to make all constructors happy: </para>
             <code>
               // Create a new FAST Corners Detector
               FastCornersDetector fast = new FastCornersDetector();
               
               // Create a Fast Retina Keypoint (FREAK) detector using FAST
               FastRetinaKeypointDetector freak = new FastRetinaKeypointDetector(fast);
            
               // Create a K-Modes clustering algorithm which can operate on <c>byte[]</c>
               var kmodes = new KModes&lt;byte[]&gt;(numberOfWords, Distance.BitwiseHamming);
            
               // Finally, create bag-of-words (BoW) with the given number of words
               var bow = new BagOfVisualWords&lt;FastRetinaKeypoint, byte[]&gt;(freak, kmodes);
               
               // Create the BoW codebook using a set of training images
               bow.Compute(images);
               
               // Create a fixed-length feature vector for a new image
               double[] featureVector = bow.GetFeatureVector(image);
             </code>
             </example>
             
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords`2.#ctor(Accord.Imaging.IFeatureDetector{`0,`1},Accord.MachineLearning.IClusteringAlgorithm{`1})">
            <summary>
              Constructs a new <see cref="T:Accord.Imaging.BagOfVisualWords"/>.
            </summary>
            
            <param name="detector">The feature detector to use.</param>
            <param name="algorithm">The clustering algorithm to use.</param>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords`2.Compute(System.Drawing.Bitmap[],System.Double)">
            <summary>
              Computes the Bag of Words model.
            </summary>
            
            <param name="images">The set of images to initialize the model.</param>
            <param name="threshold">Convergence rate for the k-means algorithm. Default is 1e-5.</param>
            
            <returns>The list of feature points detected in all images.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords`2.GetFeatureVector(System.Drawing.Bitmap)">
            <summary>
              Gets the codeword representation of a given image.
            </summary>
            
            <param name="value">The image to be processed.</param>
            
            <returns>A double vector with the same length as words
            in the code book.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords`2.GetFeatureVector(AForge.Imaging.UnmanagedImage)">
            <summary>
              Gets the codeword representation of a given image.
            </summary>
            
            <param name="value">The image to be processed.</param>
            
            <returns>A double vector with the same length as words
            in the code book.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords`2.GetFeatureVector(System.Collections.Generic.List{`0})">
            <summary>
              Gets the codeword representation of a given image.
            </summary>
            
            <param name="points">The interest points of the image.</param>
            
            <returns>A double vector with the same length as words
            in the code book.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords`2.Save(System.IO.Stream)">
            <summary>
              Saves the bag of words to a stream.
            </summary>
            
            <param name="stream">The stream to which the bow is to be serialized.</param>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords`2.Save(System.String)">
            <summary>
              Saves the bag of words to a file.
            </summary>
            
            <param name="path">The path to the file to which the bow is to be serialized.</param>
            
        </member>
        <member name="P:Accord.Imaging.BagOfVisualWords`2.NumberOfWords">
            <summary>
              Gets the number of words in this codebook.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.BagOfVisualWords`2.Clustering">
            <summary>
              Gets the clustering algorithm used to create this model.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.BagOfVisualWords`2.Detector">
            <summary>
              Gets the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector">SURF</see>
              feature point detector used to identify visual features in images.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords`1.#ctor(Accord.Imaging.IFeatureDetector{`0},System.Int32)">
            <summary>
              Constructs a new <see cref="T:Accord.Imaging.BagOfVisualWords"/>.
            </summary>
            
            <param name="detector">The feature detector to use.</param>
            <param name="numberOfWords">The number of codewords.</param>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords`1.#ctor(Accord.Imaging.IFeatureDetector{`0},Accord.MachineLearning.IClusteringAlgorithm{System.Double[]})">
            <summary>
              Constructs a new <see cref="T:Accord.Imaging.BagOfVisualWords"/>.
            </summary>
            
            <param name="detector">The feature detector to use.</param>
            <param name="algorithm">The clustering algorithm to use.</param>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.#ctor(System.Int32)">
            <summary>
              Constructs a new <see cref="T:Accord.Imaging.BagOfVisualWords"/> using a
              <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector">surf</see>
              feature detector to identify features.
            </summary>
            
            <param name="numberOfWords">The number of codewords.</param>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.#ctor(Accord.MachineLearning.IClusteringAlgorithm{System.Double[]})">
            <summary>
              Constructs a new <see cref="T:Accord.Imaging.BagOfVisualWords"/> using a
              <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector">surf</see>
              feature detector to identify features.
            </summary>
            
            <param name="algorithm">The clustering algorithm to use.</param>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.Load(System.IO.Stream)">
            <summary>
              Loads a bag of words from a stream.
            </summary>
            
            <param name="stream">The stream from which the bow is to be deserialized.</param>
            
            <returns>The deserialized bag of words.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.Load(System.String)">
            <summary>
              Loads a bag of words from a file.
            </summary>
            
            <param name="path">The path to the file from which the bow is to be deserialized.</param>
            
            <returns>The deserialized bag of words.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.Load``1(System.IO.Stream)">
            <summary>
              Loads a bag of words from a stream.
            </summary>
            
            <param name="stream">The stream from which the bow is to be deserialized.</param>
            
            <returns>The deserialized bag of words.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.Load``1(System.String)">
            <summary>
              Loads a bag of words from a file.
            </summary>
            
            <param name="path">The path to the file from which the bow is to be deserialized.</param>
            
            <returns>The deserialized bag of words.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.Load``2(System.IO.Stream)">
            <summary>
              Loads a bag of words from a stream.
            </summary>
            
            <param name="stream">The stream from which the bow is to be deserialized.</param>
            
            <returns>The deserialized bag of words.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BagOfVisualWords.Load``2(System.String)">
            <summary>
              Loads a bag of words from a file.
            </summary>
            
            <param name="path">The path to the file from which the bow is to be deserialized.</param>
            
            <returns>The deserialized bag of words.</returns>
            
        </member>
        <member name="P:Accord.Imaging.BagOfVisualWords.Detector">
            <summary>
              Gets the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector">SURF</see>
              feature point detector used to identify visual features in images.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Tools">
            <summary>
              Static tool functions for imaging.
            </summary>
            
            <remarks>
              <para>
                References:
                <list type="bullet">
                  <item><description>
                    P. D. Kovesi. MATLAB and Octave Functions for Computer Vision and Image Processing.
                    School of Computer Science and Software Engineering, The University of Western Australia.
                    Available in: <a href="http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Match/matchbycorrelation.m">
                    http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Match/matchbycorrelation.m </a>
                  </description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Center(System.Drawing.Rectangle)">
            <summary>
              Computes the center of a given rectangle.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.IsEqual(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32)">
            <summary>
              Compares two rectangles for equality, considering an acceptance threshold.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Homography(Accord.Imaging.PointH[],Accord.Imaging.PointH[])">
            <summary>
              Creates an homography matrix matching points
              from a set of points to another.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Homography(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
              Creates an homography matrix matching points
              from a set of points to another.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Fundamental(Accord.Imaging.PointH[],Accord.Imaging.PointH[],Accord.Imaging.PointH[]@)">
            <summary>
              Creates the fundamental matrix between two
              images from a set of points from each image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Fundamental(Accord.Imaging.PointH[],Accord.Imaging.PointH[])">
            <summary>
              Creates the fundamental matrix between two
              images from a set of points from each image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Fundamental(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
              Creates the fundamental matrix between two
              images from a set of points from each image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Normalize(Accord.Imaging.PointH[],Accord.Imaging.MatrixH@)">
            <summary>
              Normalizes a set of homogeneous points so that the origin is located
              at the centroid and the mean distance to the origin is sqrt(2).
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Normalize(System.Drawing.PointF[],Accord.Imaging.MatrixH@)">
            <summary>
              Normalizes a set of homogeneous points so that the origin is located
              at the centroid and the mean distance to the origin is sqrt(2).
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Normalize(System.Drawing.PointF[],System.Single[0:,0:]@)">
            <summary>
              Normalizes a set of homogeneous points so that the origin is located
              at the centroid and the mean distance to the origin is sqrt(2).
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Normalize(Accord.Imaging.PointH[],System.Single[0:,0:]@)">
            <summary>
              Normalizes a set of homogeneous points so that the origin is located
              at the centroid and the mean distance to the origin is sqrt(2).
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Collinear(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
              Detects if three points are collinear.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Collinear(Accord.Imaging.PointH,Accord.Imaging.PointH,Accord.Imaging.PointH)">
            <summary>
              Detects if three points are collinear.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Sum(System.Drawing.Bitmap)">
            <summary>
              Computes the sum of the pixels in a given image.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Sum(System.Drawing.Imaging.BitmapData)">
            <summary>
              Computes the sum of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Sum(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the sum of the pixels in a given image.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Sum(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
              Computes the sum of the pixels in a given image.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Sum(System.Drawing.Imaging.BitmapData,System.Drawing.Rectangle)">
            <summary>
              Computes the sum of the pixels in a given image.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Sum(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the sum of the pixels in a given image.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Tools.Mean(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
              Computes the arithmetic mean of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Mean(System.Drawing.Imaging.BitmapData,System.Drawing.Rectangle)">
            <summary>
              Computes the arithmetic mean of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Mean(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the arithmetic mean of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Mean(System.Drawing.Bitmap)">
            <summary>
              Computes the arithmetic mean of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Mean(System.Drawing.Imaging.BitmapData)">
            <summary>
              Computes the arithmetic mean of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Mean(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the arithmetic mean of the pixels in a given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.StandardDeviation(System.Drawing.Bitmap,System.Double)">
            <summary>
              Computes the standard deviation of image pixels.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.StandardDeviation(System.Drawing.Imaging.BitmapData,System.Double)">
            <summary>
              Computes the standard deviation of image pixels.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.StandardDeviation(AForge.Imaging.UnmanagedImage,System.Double)">
            <summary>
              Computes the standard deviation of image pixels.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.StandardDeviation(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Double)">
            <summary>
              Computes the standard deviation of image pixels.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.StandardDeviation(System.Drawing.Imaging.BitmapData,System.Drawing.Rectangle,System.Double)">
            <summary>
              Computes the standard deviation of image pixels.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.StandardDeviation(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle,System.Double)">
            <summary>
              Computes the standard deviation of image pixels.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(System.Drawing.Imaging.BitmapData,System.Drawing.Rectangle)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(AForge.Imaging.UnmanagedImage,System.Int32)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(AForge.Imaging.UnmanagedImage,System.Int32)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(System.Drawing.Bitmap)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Max(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(System.Drawing.Imaging.BitmapData,System.Drawing.Rectangle)">
            <summary>
              Computes the minimum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the minimum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the minimum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(System.Drawing.Bitmap)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Min(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
              Computes the maximum pixel value in the given image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between -1 and 1.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Bitmap,System.Int32,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Imaging.BitmapData,System.Int32)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between -1 and 1.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Imaging.BitmapData,System.Int32,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(AForge.Imaging.UnmanagedImage,System.Int32)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(AForge.Imaging.UnmanagedImage,System.Int32,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Bitmap)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between -1 and 1.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Bitmap,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleArray(System.Drawing.Imaging.BitmapData,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleMatrix(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between -1 and 1.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleMatrix(System.Drawing.Bitmap,System.Int32,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleMatrix(System.Drawing.Imaging.BitmapData,System.Int32)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between -1 and 1.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToDoubleMatrix(System.Drawing.Imaging.BitmapData,System.Int32,System.Double,System.Double)">
            <summary>
              Converts a given image into a array of double-precision
              floating-point numbers scaled between the given range.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToBitmap(System.Byte[0:,0:])">
            <summary>
              Converts an image given as a matrix of pixel values into
              a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            
            <param name="pixels">A matrix containing the grayscale pixel
            values as <see cref="T:System.Double">bytes</see>.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of the same width
            and height as the pixel matrix containing the given pixel values.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToBitmap(System.Int16[0:,0:])">
            <summary>
              Converts an image given as a matrix of pixel values into
              a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            
            <param name="pixels">A matrix containing the grayscale pixel
            values as <see cref="T:System.Double">bytes</see>.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of the same width
            and height as the pixel matrix containing the given pixel values.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToBitmap(System.Double[],System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
              Converts an image given as a array of pixel values into
              a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            
            <param name="pixels">An array containing the grayscale pixel
            values as <see cref="T:System.Double">doubles</see>.</param>
            <param name="width">The width of the resulting image.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="min">The minimum value representing a color value of 0.</param>
            <param name="max">The maximum value representing a color value of 255. </param>
            
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of given width and height
            containing the given pixel values.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToBitmap(System.Double[][],System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
              Converts an image given as a array of pixel values into
              a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            
            <param name="pixels">An jagged array containing the pixel values
            as double arrays. Each element of the arrays will be converted to
            a R, G, B, A value. The bits per pixel of the resulting image
            will be set according to the size of these arrays.</param>
            <param name="width">The width of the resulting image.</param>
            <param name="height">The height of the resulting image.</param>
            <param name="min">The minimum value representing a color value of 0.</param>
            <param name="max">The maximum value representing a color value of 255. </param>
            
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of given width and height
            containing the given pixel values.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Tools.ToBitmap(System.Double[][],System.Int32,System.Int32)">
            <summary>
              Converts an image given as a array of pixel values into
              a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            
            <param name="pixels">An jagged array containing the pixel values
            as double arrays. Each element of the arrays will be converted to
            a R, G, B, A value. The bits per pixel of the resulting image
            will be set according to the size of these arrays.</param>
            <param name="width">The width of the resulting image.</param>
            <param name="height">The height of the resulting image.</param>
            
            <returns>A <see cref="T:System.Drawing.Bitmap"/> of given width and height
            containing the given pixel values.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Multiply(System.Drawing.PointF,System.Single[0:,0:])">
            <summary>
              Multiplies a point by a transformation matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.Multiply(System.Single[0:,0:],System.Drawing.PointF)">
            <summary>
              Multiplies a transformation matrix and a point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.InnerProduct(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
              Computes the inner product of two points.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.TransformPoints(System.Single[0:,0:],System.Drawing.PointF[])">
            <summary>
              Transforms the given points using this transformation matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Tools.GetFormat(System.String)">
            <summary>
              Gets the image format most likely associated with a given file name.
            </summary>
            
            <param name="fileName">The filename in the form "image.jpg".</param>
            
            <returns>The <see cref="T:System.Drawing.Imaging.ImageFormat"/> most likely associated with
              the given <paramref name="fileName"/>.</returns>
            
        </member>
        <member name="T:Accord.Imaging.Filters.GaborFilter">
            <summary>
              Gabor filter.
            </summary>
            
            <remarks>
            <para>
              In image processing, a Gabor filter, named after Dennis Gabor, is a linear 
              filter used for edge detection. Frequency and orientation representations 
              of Gabor filters are similar to those of the human visual system, and they
              have been found to be particularly appropriate for texture representation 
              and discrimination. In the spatial domain, a 2D Gabor filter is a Gaussian
              kernel function modulated by a sinusoidal plane wave. The Gabor filters are
              self-similar: all filters can be generated from one mother wavelet by dilation
              and rotation. </para>
            </remarks>
            
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia Contributors, "Gabor filter". Available at
                  http://en.wikipedia.org/wiki/Gabor_filter </description></item>
              </list>
            </para>
            
            <example>
            <para>
              The following example applies a Gabor filter to detect lines
              at a 45 degrees from the following image: </para>
              
            <img src="..\images\lines.png" /> 
            
            <code>
              Bitmap input = ...;
              
              // Create a new Gabor filter
              GaborFilter filter = new GaborFilter();
              
              // Apply the filter
              Bitmap output = filter.Apply(input);
              
              // Show the output
              ImageBox.Show(output);
            </code>
            
            <para>
              The resulting image is shown below. </para>
              
            <img src="..\images\lines-gabor.png" /> 
            </example>
            
        </member>
        <member name="M:Accord.Imaging.Filters.GaborFilter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.GaborFilter"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.GaborFilter.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.GaborFilter.Size">
            <summary>
              Gets or sets the size of the filter. Default is 3.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.GaborFilter.Sigma">
            <summary>
              Gets or sets the Gaussian variance for the filter. Default is 2.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.GaborFilter.Theta">
            <summary>
              Gets or sets the orientation for the filter, in radians. Default is 0.6.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.GaborFilter.Lambda">
            <summary>
              Gets or sets the wavelength for the filter. Default is 4.0.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.GaborFilter.Gamma">
            <summary>
              Gets or sets the aspect ratio for the filter. Default is 0.3.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.GaborFilter.Psi">
            <summary>
              Gets or sets the phase offset for the filter. Default is 1.0.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.GaborFilter.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Converters.ImageToArray">
            <summary>
              Bitmap to jagged array converter.
            </summary>
            
            <remarks>
              This class converts images to single or jagged arrays of
              either double-precision or single-precision floating-point
              values.
            </remarks>
            
            <example>
            <para>
              This example converts a 16x16 Bitmap image into
              a double[] array with values between 0 and 1.</para>
              
            <code>
            // Obtain a 16x16 bitmap image
            // Bitmap image = ...
            
            // Show on screen
            ImageBox.Show(image, PictureBoxSizeMode.Zoom);
            
            // Create the converter to convert the image to an
            //   array containing only values between 0 and 1 
            ImageToArray conv = new ImageToArray(min: 0, max: 1);
            
            // Convert the image and store it in the array
            double[] array; conv.Convert(image, out array);
            
            // Show the array on screen
            ImageBox.Show(array, 16, 16, PictureBoxSizeMode.Zoom);    /// </code>
            
            <para>
              The resulting image is shown below.</para>
            
            <img src="..\images\image-to-matrix.png" />
            
            </example>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ImageToArray"/> class.
            </summary>
            
            <param name="min">
              The minimum double value in the double array
              associated with the darkest color. Default is 0.
            </param>
            <param name="max">
              The maximum double value in the double array
              associated with the brightest color. Default is 1.
            </param>
            <param name="channel">The channel to extract. Default is 0.</param>
              
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ImageToArray"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ImageToArray"/> class.
            </summary>
            
            <param name="min">
              The minimum double value in the double array
              associated with the darkest color. Default is 0.
            </param>
            <param name="max">
              The maximum double value in the double array
              associated with the brightest color. Default is 1.
            </param>
              
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(System.Drawing.Bitmap,System.Double[][]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(System.Drawing.Bitmap,System.Single[][]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(System.Drawing.Bitmap,System.Double[]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(System.Drawing.Bitmap,System.Single[]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(AForge.Imaging.UnmanagedImage,System.Double[][]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(AForge.Imaging.UnmanagedImage,System.Single[][]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(AForge.Imaging.UnmanagedImage,System.Double[]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ImageToArray.Convert(AForge.Imaging.UnmanagedImage,System.Single[]@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ImageToArray.Max">
            <summary>
              Gets or sets the maximum double value in the
              double array associated with the brightest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ImageToArray.Min">
            <summary>
              Gets or sets the minimum double value in the
              double array associated with the darkest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ImageToArray.Channel">
            <summary>
              Gets or sets the channel to be extracted.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Converters.ArrayToImage">
             <summary>
               Jagged array to Bitmap converter.
             </summary>
             
             <remarks>
             <para>
               This class can convert double and float arrays to either Grayscale
               or color Bitmap images. Color images should be represented as an
               array of pixel values for the final image. The actual dimensions
               of the image should be specified in the class constructor.</para>
               
             <para>
               When this class is converting from <see cref="T:byte[]"/> or
               <see cref="T:System.Drawing.Color[]"/>, the values of the <see cref="P:Accord.Imaging.Converters.ArrayToImage.Max"/>
               and <see cref="P:Accord.Imaging.Converters.ArrayToImage.Min"/> properties are ignored and no scaling operation
               is performed.</para>
             </remarks>
             
             <example>
             <para>
               This example converts a single array of double-precision floating-
               point numbers with values from 0 to 1 into a grayscale image.</para>
               
             <code>
             // Create an array representation 
             // of a 4x4 image with a inner 2x2
             // square drawn in the middle
            
             double[] pixels = 
             {
                 0, 0, 0, 0, 
                 0, 1, 1, 0, 
                 0, 1, 1, 0, 
                 0, 0, 0, 0, 
             };
            
             // Create the converter to create a Bitmap from the array
             ArrayToImage conv = new ArrayToImage(width: 4, height: 4);
            
             // Declare an image and store the pixels on it
             Bitmap image; conv.Convert(pixels, out image);
            
             // Show the image on screen
             image = new ResizeNearestNeighbor(320, 320).Apply(image);
             ImageBox.Show(image, PictureBoxSizeMode.Zoom);
             </code>
             
             <para>
               The resulting image is shown below.</para>
               
             <img src="..\images\matrix-to-image.png"/>
             
             </example>
             
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ArrayToImage"/> class.
            </summary>
            
            <param name="width">The width of the image to be created.</param>
            <param name="height">The height of the image to be created.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Imaging.Converters.ArrayToImage"/> class.
            </summary>
            
            <param name="width">The width of the image to be created.</param>
            <param name="height">The height of the image to be created.</param>
            <param name="min">
              The minimum double value in the double array
              associated with the darkest color. Default is 0.
            </param>
            <param name="max">
              The maximum double value in the double array
              associated with the brightest color. Default is 1.
            </param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Double[],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Single[],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Byte[],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
              For byte transformations, the Min and Max properties
              are ignored.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Double[],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Single[],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Byte[],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
              For byte transformations, the Min and Max properties
              are ignored.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Double[][],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Single[][],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Byte[][],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
              For byte transformations, the Min and Max properties
              are ignored.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Drawing.Color[],System.Drawing.Bitmap@)">
            <summary>
              Converts an image from one representation to another.
              For byte transformations, the Min and Max properties are ignored. The 
              resulting image from upon calling this method will always be <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb">32-bit ARGB</see>.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Double[][],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Single[][],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Byte[][],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
              For byte transformations, the Min and Max properties
              are ignored.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="M:Accord.Imaging.Converters.ArrayToImage.Convert(System.Drawing.Color[],AForge.Imaging.UnmanagedImage@)">
            <summary>
              Converts an image from one representation to another.
            </summary>
            
            <param name="input">The input image to be converted.</param>
            <param name="output">The converted image.</param>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ArrayToImage.Max">
            <summary>
              Gets or sets the maximum double value in the
              double array associated with the brightest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ArrayToImage.Min">
            <summary>
              Gets or sets the minimum double value in the
              double array associated with the darkest color.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ArrayToImage.Height">
            <summary>
              Gets or sets the height of the image
              stored in the double array.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Converters.ArrayToImage.Width">
            <summary>
              Gets or sets the width of the image
              stored in the double array.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.CompassConvolution">
            <summary>
              Compass convolution filter.
            </summary>
            
            <seealso cref="T:Accord.Imaging.Filters.RobinsonEdgeDetector"/>
            <seealso cref="T:Accord.Imaging.Filters.KirschEdgeDetector"/>
            
        </member>
        <member name="M:Accord.Imaging.Filters.CompassConvolution.#ctor(System.Int32[][0:,0:])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.CompassConvolution"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.CompassConvolution.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.CompassConvolution.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.SauvolaThreshold">
            <summary>
              Sauvola Threshold.
            </summary>
            
            <remarks>
              <para>
              The Sauvola filter is a variation of the <see cref="T:Accord.Imaging.Filters.NiblackThreshold"/>
              thresholding filter.</para>
              
            <para>
             This filter implementation has been contributed by Diego Catalano.</para>
             
            <para>
              References:
              <list type="bullet">
                <item><description>
                    Sauvola, Jaakko, and Matti Pietikäinen. "Adaptive document image binarization."
                    Pattern Recognition 33.2 (2000): 225-236.</description></item>
              </list></para>   
            </remarks>
            
            <example>
            <code>
            Bitmap image = ... // Lena's picture
            
            // Create a new Sauvola threshold:
            var sauvola = new SauvolaThreshold();
            
            // Compute the filter
            Bitmap result = sauvola.Apply(image);
            
            // Show on the screen
            ImageBox.Show(result);
            </code>
            
            <para>
              The resulting image is shown below:</para>
            
              <img src="..\images\sauvola.png"/>
            
            </example>
            
            <seealso cref="T:Accord.Imaging.Filters.NiblackThreshold"/>
            
        </member>
        <member name="M:Accord.Imaging.Filters.SauvolaThreshold.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.SauvolaThreshold"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.SauvolaThreshold.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.SauvolaThreshold.Radius">
            <summary>
              Gets or sets the filter convolution
              radius. Default is 15.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.SauvolaThreshold.K">
            <summary>
              Gets or sets the user-defined 
              parameter k. Default is 0.5.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.SauvolaThreshold.R">
            <summary>
              Gets or sets the dynamic range of the 
              standard deviation, R. Default is 128.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.SauvolaThreshold.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.RansacHomographyEstimator">
            <summary>
              RANSAC Robust Homography Matrix Estimator.
            </summary>
            
            <remarks>
            <para>
              Fitting a homography using RANSAC is pretty straightforward. Being a iterative method,
              in a single iteration a random sample of four correspondences is selected from the 
              given correspondence points and a homography H is then computed from those points.</para>
            <para>
              The original points are then transformed using this homography and their distances to
              where those transforms should be is then computed and matching points can classified
              as inliers and non-matching points as outliers.</para>  
            <para>
              After a given number of iterations, the iteration which produced the largest number
              of inliers is then selected as the best estimation for H.</para>  
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  E. Dubrofsky. Homography Estimation. Master thesis. Available on:
                  http://www.cs.ubc.ca/~dubroe/courses/MastersEssay.pdf </description></item>
              </list></para>
            </remarks>
            
            <example>
            <code>
            // Let's start with two pictures that have been
            // taken from slightly different points of view:
            //
            Bitmap img1 = Resources.dc_left;
            Bitmap img2 = Resources.dc_right;
            
            // Those pictures are shown below:
            ImageBox.Show(img1, PictureBoxSizeMode.Zoom, 640, 480);
            ImageBox.Show(img2, PictureBoxSizeMode.Zoom, 640, 480);
            </code>
            
            <img src="..\images\panorama-1.png"/> 
            <img src="..\images\panorama-2.png"/> 
            
            <code>
            // Step 1: Detect feature points using Surf Corners Detector
            var surf = new SpeededUpRobustFeaturesDetector();
            
            var points1 = surf.ProcessImage(img1);
            var points2 = surf.ProcessImage(img2);
            
            // Step 2: Match feature points using a k-NN
            var matcher = new KNearestNeighborMatching(5);
            var matches = matcher.Match(points1, points2);
            
            // Step 3: Create the matrix using a robust estimator
            var ransac = new RansacHomographyEstimator(0.001, 0.99);
            MatrixH homographyMatrix = ransac.Estimate(matches);
            
            // Step 4: Project and blend using the homography
            Blend blend = new Blend(homographyMatrix, img1);
            
            
            // Compute the blending algorithm
            Bitmap result = blend.Apply(img2);
            
            // Show on screen
            ImageBox.Show(result, PictureBoxSizeMode.Zoom, 640, 480);
            </code>
            
            <para>
              The resulting image is shown below. </para>
              
            <img src="..\images\panorama-3.png"/> 
            </example>
            
            <seealso cref="T:Accord.Imaging.MatrixH"/>
            <seealso cref="T:Accord.Imaging.Filters.Blend"/>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new RANSAC homography estimator.
            </summary>
            
            <param name="threshold">Inlier threshold.</param>
            <param name="probability">Inlier probability.</param>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.Estimate(AForge.Point[][])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.Estimate(AForge.Point[],AForge.Point[])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.Estimate(AForge.IntPoint[][])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.Estimate(AForge.IntPoint[],AForge.IntPoint[])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.Estimate(System.Drawing.PointF[][])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.Estimate(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
              Matches two sets of points using RANSAC.
            </summary>
            
            <returns>The homography matrix matching x1 and x2.</returns>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.homography(System.Int32[])">
            <summary>
              Estimates a homography with the given points.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.distance(Accord.Imaging.MatrixH,System.Double)">
            <summary>
              Compute inliers using the Symmetric Transfer Error,
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.RansacHomographyEstimator.degenerate(System.Int32[])">
            <summary>
              Checks if the selected points will result in a degenerate homography.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.RansacHomographyEstimator.Ransac">
            <summary>
              Gets the RANSAC estimator used.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.RansacHomographyEstimator.Inliers">
            <summary>
              Gets the final set of inliers detected by RANSAC.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.PointH">
            <summary>
              Represents an ordered pair of real x- and y-coordinates and scalar w that defines
              a point in a two-dimensional plane using homogeneous coordinates.
            </summary>
            
            <remarks>
            <para>
              In mathematics, homogeneous coordinates are a system of coordinates used in
              projective geometry much as Cartesian coordinates are used in Euclidean geometry.</para>
            <para>
              They have the advantage that the coordinates of a point, even those at infinity,
              can be represented using finite coordinates. Often formulas involving homogeneous
              coordinates are simpler and more symmetric than their Cartesian counterparts.</para>
            <para>
              Homogeneous coordinates have a range of applications, including computer graphics,
              where they allow affine transformations and, in general, projective transformations
              to be easily represented by a matrix.</para>
              
            <para>
              References: 
              <list type="bullet">
                <item><description>
                  http://alumnus.caltech.edu/~woody/docs/3dmatrix.html</description></item>
                <item><description>
                  http://simply3d.wordpress.com/2009/05/29/homogeneous-coordinates/</description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.PointH.#ctor(System.Single,System.Single)">
            <summary>
              Creates a new point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.#ctor(System.Double,System.Double)">
            <summary>
              Creates a new point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.#ctor(System.Single,System.Single,System.Single)">
            <summary>
              Creates a new point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Creates a new point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Transform(System.Single[0:,0:])">
            <summary>
              Transforms a point using a projection matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Normalize">
            <summary>
              Normalizes the point to have unit scale.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.ToArray">
            <summary>
              Converts the point to a array representation.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Multiply(Accord.Imaging.PointH,System.Single)">
            <summary>
              Multiplication by scalar.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Multiply(System.Single,Accord.Imaging.PointH)">
            <summary>
              Multiplication by scalar.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Multiply(System.Single)">
            <summary>
              Multiplies the point by a scalar.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Subtraction(Accord.Imaging.PointH,Accord.Imaging.PointH)">
            <summary>
              Subtraction.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Subtract(Accord.Imaging.PointH)">
            <summary>
              Subtracts the values of two points.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Addition(Accord.Imaging.PointH,Accord.Imaging.PointH)">
            <summary>
              Addition.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Add(Accord.Imaging.PointH)">
            <summary>
              Add the values of two points.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Equality(Accord.Imaging.PointH,Accord.Imaging.PointH)">
            <summary>
              Equality.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Inequality(Accord.Imaging.PointH,Accord.Imaging.PointH)">
            <summary>
              Inequality
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.op_Implicit(Accord.Imaging.PointH)~System.Drawing.PointF">
            <summary>
              PointF Conversion.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Ceiling(Accord.Imaging.PointH)">
            <summary>
              Converts to a Integer point by computing the ceiling of the point coordinates. 
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Round(Accord.Imaging.PointH)">
            <summary>
              Converts to a Integer point by rounding the point coordinates. 
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Truncate(Accord.Imaging.PointH)">
            <summary>
              Converts to a Integer point by truncating the point coordinates. 
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.Equals(System.Object)">
            <summary>
              Compares two objects for equality.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.PointH.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.PointH.Empty">
            <summary>
              Returns the empty point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.PointH.X">
            <summary>
              The first coordinate.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.PointH.Y">
            <summary>
              The second coordinate.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.PointH.W">
            <summary>
              The inverse scaling factor for X and Y.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.PointH.IsNormalized">
            <summary>
              Gets whether this point is normalized (w = 1).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.PointH.IsAtInfinity">
            <summary>
              Gets whether this point is at infinity (w = 0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.PointH.IsEmpty">
            <summary>
              Gets whether this point is at the origin.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.HaralickDescriptor">
            <summary>
              Haralick's Texture Features.
            </summary>
            
            <remarks>
            <para>
              Haralick's texture features are based on measures derived from
              <see cref="T:Accord.Imaging.GrayLevelCooccurrenceMatrix">Gray-level Co-occurrence 
              matrices (GLCM)</see>.</para>
            <para>
              Whether considering the intensity or grayscale values of the image 
              or various dimensions of color, the co-occurrence matrix can measure
              the texture of the image. Because co-occurrence matrices are typically
              large and sparse, various metrics of the matrix are often taken to get
              a more useful set of features. Features generated using this technique
              are usually called Haralick features, after R. M. Haralick, attributed to
              his paper Textural features for image classification (1973).</para>
              
            <para>
              This class encompasses most of the features derived on Haralick's original
              paper. All features are lazy-evaluated until needed; but may also be
              combined in a single feature vector by calling <see cref="M:Accord.Imaging.HaralickDescriptor.GetVector(System.Int32)"/>.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia Contributors, "Co-occurrence matrix". Available at
                  http://en.wikipedia.org/wiki/Co-occurrence_matrix </description></item>
                <item><description>
                  Robert M Haralick, K Shanmugam, Its'hak Dinstein; "Textural 
                  Features for Image Classification". IEEE Transactions on Systems, Man,
                  and Cybernetics. SMC-3 (6): 610–621, 1973. Available at:
                  <a href="http://www.makseq.com/materials/lib/Articles-Books/Filters/Texture/Co-occurrence/haralick73.pdf">
                  http://www.makseq.com/materials/lib/Articles-Books/Filters/Texture/Co-occurrence/haralick73.pdf </a>
                  </description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Imaging.GrayLevelCooccurrenceMatrix"/>
            <seealso cref="T:Accord.Imaging.Haralick"/>
            
        </member>
        <member name="M:Accord.Imaging.HaralickDescriptor.#ctor(System.Double[0:,0:])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HaralickDescriptor"/> class.
            </summary>
            
            <param name="cooccurrenceMatrix">The co-occurrence matrix to compute features from.</param>
            
        </member>
        <member name="M:Accord.Imaging.HaralickDescriptor.GetVector(System.Int32)">
            <summary>
              Creates a feature vector with 
              the chosen feature functions.
            </summary>
            
            <param name="features">How many features to include in the vector. Default is 13.</param>
            
            <returns>A vector with Haralick's features up 
            to the given number passed as input.</returns>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.GrayLevels">
            <summary>
              Gets the number of gray levels in the 
              original image. This is the number of
              dimensions of the co-occurrence matrix.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.Sum">
            <summary>
              Gets the matrix sum.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.Mean">
            <summary>
              Gets the matrix mean μ.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.RowMarginal">
            <summary>
              Gets the marginal probability vector
              obtained by summing the rows of p(i,j),
              given as p<sub>x</sub>(i) = Σ<sub>j</sub> p(i,j).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.ColumnMarginal">
            <summary>
              Gets the marginal probability vector
              obtained by summing the columns of p(i,j),
              given as p<sub>y</sub>(j) = Σ<sub>i</sub> p(i,j).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.RowMean">
            <summary>
              Gets μ<sub>x</sub>, the mean value of the 
              <see cref="P:Accord.Imaging.HaralickDescriptor.RowMarginal"/> vector.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.ColumnMean">
            <summary>
              Gets μ_y, the mean value of the 
              <see cref="P:Accord.Imaging.HaralickDescriptor.ColumnMarginal"/> vector.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.RowStandardDeviation">
            <summary>
              Gets σ<sub>x</sub>, the variance of the 
              <see cref="P:Accord.Imaging.HaralickDescriptor.RowMarginal"/> vector.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.ColumnStandardDeviation">
            <summary>
              Gets σ<sub>y</sub>, the variance of the 
              <see cref="P:Accord.Imaging.HaralickDescriptor.ColumnMarginal"/> vector.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.RowEntropy">
            <summary>
              Gets H<sub>x</sub>, the entropy of the 
              <see cref="P:Accord.Imaging.HaralickDescriptor.RowMarginal"/> vector.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.ColumnEntropy">
            <summary>
              Gets H<sub>y</sub>, the entropy of the 
              <see cref="P:Accord.Imaging.HaralickDescriptor.ColumnMarginal"/> vector.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.Sums">
            <summary>
              Gets p<sub>(x+y)</sub>(k), the sum 
              of elements whose indices sum to k.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.Differences">
            <summary>
              Gets p<sub>(x-y)</sub> (k), the sum of elements 
              whose absolute indices diferences equals to k.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F01">
            <summary>
              Gets Haralick's first textural feature,
              the Angular Second Momentum.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F02">
            <summary>
              Gets Haralick's second textural feature,
              the Contrast.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F03">
            <summary>
              Gets Haralick's third textural feature,
              the Correlation.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F04">
            <summary>
              Gets Haralick's fourth textural feature,
              the Sum of Squares: Variance.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F05">
             <summary>
               Gets Haralick's fifth textural feature,
               the Inverse Difference Moment.
             </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F06">
            <summary>
              Gets Haralick's sixth textural feature,
              the Sum Average.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F07">
            <summary>
              Gets Haralick's seventh textural feature,
              the Sum Variance.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F08">
            <summary>
              Gets Haralick's eighth textural feature,
              the Sum Entropy.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F09">
            <summary>
              Gets Haralick's ninth textural feature,
              the Entropy.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F10">
            <summary>
              Gets Haralick's tenth textural feature,
              the Difference Variance.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F11">
            <summary>
              Gets Haralick's eleventh textural feature,
              the Difference Entropy.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F12">
            <summary>
              Gets Haralick's twelfth textural feature,
              the First Information Measure.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F13">
            <summary>
              Gets Haralick's thirteenth textural feature,
              the Second Information Measure.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.F14">
            <summary>
              Gets Haralick's fourteenth textural feature,
              the Maximal Correlation Coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.AngularSecondMomentum">
            <summary>
              Gets Haralick's first textural feature, the
              Angular Second Momentum, also known as Energy
              or Homogeneity.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.LaplaceContrast">
            <summary>
              Gets a variation of Haralick's second textural feature,
              the Contrast with Absolute values (instead of squares).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.Contrast">
            <summary>
              Gets Haralick's second textural feature,
              the Contrast.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.Correlation">
            <summary>
              Gets Haralick's third textural feature,
              the Correlation.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.SumOfSquares">
            <summary>
              Gets Haralick's fourth textural feature,
              the Sum of Squares: Variance.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.InverseDifferenceMoment">
             <summary>
               Gets Haralick's fifth textural feature, the Inverse
               Difference Moment, also known as Local Homogeneity.
               Can be regarded as a complement to <see cref="P:Accord.Imaging.HaralickDescriptor.Contrast"/>.
             </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.TextureHomogeneity">
            <summary>
              Gets a variation of Haralick's fifth textural feature,
              the Texture Homogeneity. Can be regarded as a complement
              to <see cref="P:Accord.Imaging.HaralickDescriptor.LaplaceContrast"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.SumAverage">
            <summary>
              Gets Haralick's sixth textural feature,
              the Sum Average.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.SumVariance">
            <summary>
              Gets Haralick's seventh textural feature,
              the Sum Variance.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.SumEntropy">
            <summary>
              Gets Haralick's eighth textural feature,
              the Sum Entropy.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.Entropy">
            <summary>
              Gets Haralick's ninth textural feature,
              the Entropy.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.DifferenceVariance">
            <summary>
              Gets Haralick's tenth textural feature,
              the Difference Variance.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.DifferenceEntropy">
            <summary>
              Gets Haralick's eleventh textural feature,
              the Difference Entropy.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.FirstInformationMeasure">
            <summary>
              Gets Haralick's twelfth textural feature,
              the First Information Measure.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.SecondInformationMeasure">
            <summary>
              Gets Haralick's thirteenth textural feature,
              the Second Information Measure.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.MaximalCorrelationCoefficient">
            <summary>
              Gets Haralick's fourteenth textural feature,
              the Maximal Correlation Coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.ClusterShade">
            <summary>
              Gets the Cluster Shade textural feature.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HaralickDescriptor.ClusterProminence">
            <summary>
              Gets the Cluster Prominence textural feature.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.HaralickDescriptorDictionary">
            <summary>
              Feature dictionary. Associates a set of Haralick features to a given degree
              used to compute the originating <see cref="T:Accord.Imaging.GrayLevelCooccurrenceMatrix">GLCM</see>.
            </summary>
            
            <seealso cref="T:Accord.Imaging.Haralick"/>
            <seealso cref="T:Accord.Imaging.HaralickDescriptor"/>
            
        </member>
        <member name="M:Accord.Imaging.HaralickDescriptorDictionary.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HaralickDescriptorDictionary"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.HaralickDescriptorDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
               Initializes a new instance of the <see cref="T:Accord.Imaging.HaralickDescriptorDictionary"/>
               class with serialized data.
            </summary>
            
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
              object containing the information required to serialize this 
              <see cref="T:Accord.Imaging.HaralickDescriptorDictionary"/>.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/>
               structure containing the source and destination of the serialized stream
               associated with this <see cref="T:Accord.Imaging.HaralickDescriptorDictionary"/>.</param>
            
        </member>
        <member name="M:Accord.Imaging.HaralickDescriptorDictionary.Combine(System.Int32)">
            <summary>
              Combines features generated from different <see cref="T:Accord.Imaging.GrayLevelCooccurrenceMatrix">
              GLCMs</see> computed using different <see cref="T:Accord.Imaging.CooccurrenceDegree">angulations</see>
              by concatenating them into a single vector.
            </summary>
            
            <param name="features">The number of Haralick's original features to compute.</param>
            
            <returns>A single vector containing all values computed from
            the different <see cref="T:Accord.Imaging.HaralickDescriptor"/>s.</returns>
            
            <remarks>
              If there are <c>d</c> <see cref="T:Accord.Imaging.CooccurrenceDegree">degrees</see> in this
              collection, and <c>n</c> <paramref name="features"/> given to compute, the
              generated vector will have size <c>d * n</c>. All features from different
              degrees will be concatenated into this single result vector.
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.HaralickDescriptorDictionary.Average(System.Int32)">
            <summary>
              Combines features generated from different <see cref="T:Accord.Imaging.GrayLevelCooccurrenceMatrix">
              GLCMs</see> computed using different <see cref="T:Accord.Imaging.CooccurrenceDegree">angulations</see>
              by averaging them into a single vector.
            </summary>
            
            <param name="features">The number of Haralick's original features to compute.</param>
            
            <returns>A single vector containing the average of the values
              computed from the different <see cref="T:Accord.Imaging.HaralickDescriptor"/>s.</returns>
              
            <remarks>
              If there are <c>d</c> <see cref="T:Accord.Imaging.CooccurrenceDegree">degrees</see> in this
              collection, and <c>n</c> <paramref name="features"/> given to compute, the
              generated vector will have size <c>n</c>. All features from different
              degrees will be averaged into this single result vector.
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.HaralickDescriptorDictionary.AverageWithRange(System.Int32)">
            <summary>
              Combines features generated from different <see cref="T:Accord.Imaging.GrayLevelCooccurrenceMatrix">
              GLCMs</see> computed using different <see cref="T:Accord.Imaging.CooccurrenceDegree">angulations</see>
              by averaging them into a single vector.
            </summary>
            
            <param name="features">The number of Haralick's original features to compute.</param>
            
            <returns>A single vector containing the average of the values
              computed from the different <see cref="T:Accord.Imaging.HaralickDescriptor"/>s.</returns>
            
            <remarks>
              If there are <c>d</c> <see cref="T:Accord.Imaging.CooccurrenceDegree">degrees</see> in this
              collection, and <c>n</c> <paramref name="features"/> given to compute, the
              generated vector will have size <c>2*n*d</c>. Each even index will have
              the average of a given feature, and the subsequent odd index will contain
              the range of this feature.
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.HaralickDescriptorDictionary.Normalize(System.Int32)">
            <summary>
              Combines features generated from different <see cref="T:Accord.Imaging.GrayLevelCooccurrenceMatrix">
              GLCMs</see> computed using different <see cref="T:Accord.Imaging.CooccurrenceDegree">angulations</see>
              by averaging them into a single vector, normalizing them to be between -1 and 1.
            </summary>
            
            <param name="features">The number of Haralick's original features to compute.</param>
            
            <returns>A single vector containing the averaged and normalized values
              computed from the different <see cref="T:Accord.Imaging.HaralickDescriptor"/>s.</returns>
            
            <remarks>
              If there are <c>d</c> <see cref="T:Accord.Imaging.CooccurrenceDegree">degrees</see> in this
              collection, and <c>n</c> <paramref name="features"/> given to compute, the
              generated vector will have size <c>n</c>. All features will be averaged, and
              the mean will be scaled to be in a [-1,1] interval.
            </remarks>
            
        </member>
        <member name="T:Accord.Imaging.GrayLevelDifferenceMethod">
            <summary>
              Gray-Level Difference Method (GLDM).
            </summary>
            
            <remarks>
              Computes an gray-level histogram of difference 
              values between adjacent pixels in an image.
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.GrayLevelDifferenceMethod.#ctor(Accord.Imaging.CooccurrenceDegree)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.GrayLevelDifferenceMethod"/> class.
            </summary>
            
            <param name="degree">The direction at which the co-occurrence should be found.</param>
            
        </member>
        <member name="M:Accord.Imaging.GrayLevelDifferenceMethod.#ctor(Accord.Imaging.CooccurrenceDegree,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.GrayLevelDifferenceMethod"/> class.
            </summary>
            
            <param name="degree">The direction at which the co-occurrence should be found.</param>
            <param name="autoGray">Whether the maximum value of gray should be
              automatically computed from the image. Default is true.</param>
            
        </member>
        <member name="M:Accord.Imaging.GrayLevelDifferenceMethod.Compute(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the Gray-level Difference Method (GLDM)
              Histogram for the given source image.
            </summary>
            
            <param name="source">The source image.</param>
            
            <returns>An histogram containing co-occurrences 
            for every gray level in <paramref name="source"/>.</returns>
            
        </member>
        <member name="P:Accord.Imaging.GrayLevelDifferenceMethod.AutoGray">
            <summary>
              Gets or sets whether the maximum value of gray should be
              automatically computed from the image. If set to false,
              the maximum gray value will be assumed 255.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.GrayLevelDifferenceMethod.Degree">
            <summary>
              Gets or sets the direction at which the co-occurrence should be found.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.KirschEdgeDetector">
            <summary>
              Kirsch's Edge Detector
            </summary>
            
            <remarks>
              <para>
              The Kirsch operator or Kirsch <see cref="T:Accord.Imaging.Filters.CompassConvolution">compass kernel</see>
              is a non-linear edge detector that finds the maximum edge strength in a few 
              predetermined directions. It is named after the computer scientist Russell 
              A. Kirsch.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia contributors. "Kirsch operator." Wikipedia, The Free Encyclopedia. Wikipedia,
                  The Free Encyclopedia. Available at http://en.wikipedia.org/wiki/Kirsch_operator </description></item>
              </list>
            </para>
            </remarks>
            
            <example>
            <code>
            Bitmap image = ... // Lena's picture
            
            // Create a new Kirsch's edge detector:
            var kirsch = new KirschEdgeDetector();
            
            // Compute the image edges
            Bitmap edges = kirsch.Apply(image);
            
            // Show on screen
            ImageBox.Show(edges);
            </code>
            
            <para>
              The resulting image is shown below:</para>
            
              <img src="..\images\kirsch.png"/>
            
            </example>
            
            <seealso cref="T:Accord.Imaging.Filters.RobinsonEdgeDetector"/>
            <seealso cref="T:Accord.Imaging.Filters.CompassConvolution"/>
            
        </member>
        <member name="M:Accord.Imaging.Filters.KirschEdgeDetector.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.KirschEdgeDetector"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.KirschEdgeDetector.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="F:Accord.Imaging.Filters.KirschEdgeDetector.North">
            <summary>
              Gets the North direction Kirsch kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.KirschEdgeDetector.Northwest">
            <summary>
              Gets the Northwest direction Kirsch kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.KirschEdgeDetector.West">
            <summary>
              Gets the West direction Kirsch kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.KirschEdgeDetector.Southwest">
            <summary>
              Gets the Southwest direction Kirsch kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.KirschEdgeDetector.South">
            <summary>
              Gets the South direction Kirsch kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.KirschEdgeDetector.Southeast">
            <summary>
              Gets the Southeast direction Kirsch kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.KirschEdgeDetector.East">
            <summary>
              Gets the East direction Kirsch kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.KirschEdgeDetector.Northeast">
            <summary>
              Gets the Northeast direction Kirsch kernel mask.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.KirschEdgeDetector.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.RobinsonEdgeDetector">
            <summary>
              Robinson's Edge Detector
            </summary>
            
            <remarks>
              <para>
              Robinson's edge detector is a variation of <see cref="T:Accord.Imaging.Filters.KirschEdgeDetector">
              Kirsch's detector</see> using different convolution masks. Both are examples
              of <see cref="T:Accord.Imaging.Filters.CompassConvolution">compass convolution filters</see>.</para>
            </remarks>
            
            <example>
            <code>
            Bitmap image = ... // Lena's picture
            
            // Create a new Robinson's edge detector:
            var robinson = new RobinsonEdgeDetector();
            
            // Compute the image edges
            Bitmap edges = robinson.Apply(image);
            
            // Show on screen
            ImageBox.Show(edges);
            </code>
            
            <para>
              The resulting image is shown below:</para>
            
              <img src="..\images\robinson.png"/>
            
            </example>
            
            <seealso cref="T:Accord.Imaging.Filters.KirschEdgeDetector"/>
            <seealso cref="T:Accord.Imaging.Filters.CompassConvolution"/>
            
        </member>
        <member name="M:Accord.Imaging.Filters.RobinsonEdgeDetector.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.RobinsonEdgeDetector"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.RobinsonEdgeDetector.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="F:Accord.Imaging.Filters.RobinsonEdgeDetector.North">
            <summary>
              Gets the North direction Robinson kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.RobinsonEdgeDetector.Northwest">
            <summary>
              Gets the Northwest direction Robinson kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.RobinsonEdgeDetector.West">
            <summary>
              Gets the West direction Robinson kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.RobinsonEdgeDetector.Southwest">
            <summary>
              Gets the Southwest direction Robinson kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.RobinsonEdgeDetector.South">
            <summary>
              Gets the South direction Robinson kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.RobinsonEdgeDetector.Southeast">
            <summary>
              Gets the Southeast direction Robinson kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.RobinsonEdgeDetector.East">
            <summary>
              Gets the East direction Robinson kernel mask.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.Filters.RobinsonEdgeDetector.Northeast">
            <summary>
              Gets the Northeast direction Robinson kernel mask.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.RobinsonEdgeDetector.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.GrayWorld">
            <summary>
              Gray World filter for color normalization.
            </summary>
            
            <remarks>
            <para>
              The grey world normalization makes the assumption that changes in the 
              lighting spectrum can be modeled by three constant factors applied to
              the red, green and blue channels of color[2]. More specifically, a change
              in illuminated color can be modeled as a scaling α, β and γ in the R, 
              G and B color channels and as such the grey world algorithm is invariant
              to illumination color variations.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia Contributors, "Color normalization". Available at
                  http://en.wikipedia.org/wiki/Color_normalization </description></item>
                <item><description>
                  Jose M. Buenaposada; Luis Baumela. ﻿Variations of Grey World for
                  face tracking﻿ (Report). </description></item>
              </list>
            </para>
            </remarks>
            
            <example>
            <code>
              Bitmap image = ... // Lena's famous picture
            
              // Create a new Gray World filter
              var grayWorld = new GrayWorld();
            
              // Apply the filter
              Bitmap result = grayWorld.Apply(image);
              
              // Show on the screen
              ImageBox.Show(result);
            </code>
            
            <para>
              The resulting image is shown below. </para>
              
            <img src="..\images\gray-world.png" /> 
            </example>
            
        </member>
        <member name="M:Accord.Imaging.Filters.GrayWorld.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.GrayWorld"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.GrayWorld.ProcessFilter(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.GrayWorld.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.DifferenceOfGaussians">
             <summary>
               Difference of Gaussians filter.
             </summary>
             
             <remarks>
             <para>
               In imaging science, the difference of Gaussians is a feature 
               enhancement algorithm that involves the subtraction of one blurred 
               version of an original image from another, less blurred version of 
               the original. </para>
               
             <para>
               In the simple case of grayscale images, the blurred images are 
               obtained by convolving the original grayscale images with Gaussian
               kernels having differing standard deviations. Blurring an image using
               a Gaussian kernel suppresses only high-frequency spatial information.
               Subtracting one image from the other preserves spatial information that
               lies between the range of frequencies that are preserved in the two blurred
               images. Thus, the difference of Gaussians is a band-pass filter that 
               discards all but a handful of spatial frequencies that are present in the
               original grayscale image.</para>
               
             <para>
              This filter implementation has been contributed by Diego Catalano.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                    Wikipedia contributors. "Difference of Gaussians." Wikipedia, The Free 
                    Encyclopedia. Wikipedia, The Free Encyclopedia, 1 Jun. 2013. Web. 10 Feb.
                    2014.</description></item>
               </list></para>   
             </remarks>
            
             <example>
             <code>
               Bitmap image = ... // Lena's famous picture
             
               // Create a new Difference of Gaussians
               var DoG = new DifferenceOfGaussians();
             
               // Apply the filter
               Bitmap result = DoG.Apply(image);
               
               // Show on the screen
               ImageBox.Show(result);
             </code>
             
             <para>
               The resulting image is shown below. </para>
               
             <img src="..\images\differenceOfGaussians.png" /> 
            
             </example>
             
        </member>
        <member name="M:Accord.Imaging.Filters.DifferenceOfGaussians.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.DifferenceOfGaussians"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.DifferenceOfGaussians.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.DifferenceOfGaussians"/> class.
            </summary>
            
            <param name="windowSize1">The first window size. Default is 3</param>
            <param name="windowSize2">The second window size. Default is 4.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.DifferenceOfGaussians.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.DifferenceOfGaussians"/> class.
            </summary>
            
            <param name="windowSize1">The window size for the first Gaussian. Default is 3</param>
            <param name="windowSize2">The window size for the second Gaussian. Default is 4.</param>
            
            <param name="sigma1">The sigma for the first Gaussian. Default is 0.4.</param>
            <param name="sigma2">The sigma for the second Gaussian. Default is 0.4</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.DifferenceOfGaussians.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.DifferenceOfGaussians"/> class.
            </summary>
            
            <param name="windowSize1">The window size for the first Gaussian. Default is 3</param>
            <param name="windowSize2">The window size for the second Gaussian. Default is 4.</param>
            
            <param name="sigma">The sigma for both Gaussian filters. Default is 0.4.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.DifferenceOfGaussians.ProcessFilter(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.DifferenceOfGaussians.First">
            <summary>
              Gets or sets the first Gaussian filter.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.DifferenceOfGaussians.Second">
            <summary>
              Gets or sets the second Gaussian filter.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.DifferenceOfGaussians.Subtract">
            <summary>
              Gets or sets the subtract filter used to compute
              the difference of the two Gaussian blurs.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.DifferenceOfGaussians.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.HarrisCornerMeasure">
            <summary>
              Corners measures to be used in <see cref="T:Accord.Imaging.HarrisCornersDetector"/>.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.HarrisCornerMeasure.Harris">
            <summary>
              Original Harris' measure. Requires the setting of
              a parameter k (default is 0.04), which may be a
              bit arbitrary and introduce more parameters to tune.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.HarrisCornerMeasure.Noble">
            <summary>
              Noble's measure. Does not require a parameter
              and may be more stable.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.HarrisCornersDetector">
             <summary>
               Harris Corners Detector.
             </summary>
             
             <remarks>
             <para>This class implements the Harris corners detector.</para>
             <para>Sample usage:</para>
             
             <code>
             // create corners detector's instance
             HarrisCornersDetector hcd = new HarrisCornersDetector( );
             // process image searching for corners
             Point[] corners = hcd.ProcessImage( image );
             // process points
             foreach ( Point corner in corners )
             {
                 // ... 
             }
             </code>
             
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   P. D. Kovesi. MATLAB and Octave Functions for Computer Vision and Image Processing.
                   School of Computer Science and Software Engineering, The University of Western Australia.
                   Available in: http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Spatial/harris.m </description></item>
                 <item><description>
                   C.G. Harris and M.J. Stephens. "A combined corner and edge detector", 
                   Proceedings Fourth Alvey Vision Conference, Manchester.
                   pp 147-151, 1988.</description></item>
                 <item><description>
                   Alison Noble, "Descriptions of Image Surfaces", PhD thesis, Department
                   of Engineering Science, Oxford University 1989, p45.</description></item>
               </list>
             </para>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.MoravecCornersDetector"/>
             <seealso cref="T:AForge.Imaging.SusanCornersDetector"/>
            
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(System.Single,System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(System.Single,System.Single,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(System.Single,System.Single,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(Accord.Imaging.HarrisCornerMeasure,System.Single,System.Double,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(Accord.Imaging.HarrisCornerMeasure,System.Single,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(Accord.Imaging.HarrisCornerMeasure,System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.#ctor(Accord.Imaging.HarrisCornerMeasure)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HarrisCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process image looking for corners.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.convolve(System.Single[0:,0:],System.Single[0:,0:],System.Single[])">
            <summary>
              Convolution with decomposed 1D kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
              Process image looking for corners.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.HarrisCornersDetector.ProcessImage(System.Drawing.Bitmap)">
            <summary>
              Process image looking for corners.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="P:Accord.Imaging.HarrisCornersDetector.Measure">
            <summary>
              Gets or sets the measure to use when detecting corners.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HarrisCornersDetector.K">
            <summary>
              Harris parameter k. Default value is 0.04.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HarrisCornersDetector.Threshold">
            <summary>
              Harris threshold. Default value is 20000.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HarrisCornersDetector.Sigma">
            <summary>
              Gaussian smoothing sigma. Default value is 1.2.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HarrisCornersDetector.Suppression">
            <summary>
              Non-maximum suppression window radius. Default value is 3.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.FastRetinaKeypointDescriptor">
             <summary>
               Fast Retina Keypoint (FREAK) descriptor.
             </summary>
             
             <remarks>
             <para>
               Based on original implementation by A. Alahi, R. Ortiz, and P. 
               Vandergheynst, distributed under a BSD style license.</para>
               
             <para>
               In order to extract feature points from an image using FREAK,
               please take a look on the <see cref="T:Accord.Imaging.FastRetinaKeypointDetector"/>
               documentation page.
             </para>
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   A. Alahi, R. Ortiz, and P. Vandergheynst. FREAK: Fast Retina Keypoint. In IEEE Conference on 
                   Computer Vision and Pattern Recognition, CVPR 2012 Open Source Award Winner.</description></item>
               </list>
             </para>
             </remarks>
            
             <seealso cref="T:Accord.Imaging.FastRetinaKeypoint"/>
             <seealso cref="T:Accord.Imaging.FastRetinaKeypointDetector"/>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypointDescriptor.#ctor(AForge.Imaging.UnmanagedImage,AForge.Imaging.IntegralImage,Accord.Imaging.FastRetinaKeypointPattern)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.FastRetinaKeypointDescriptor"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypointDescriptor.Compute(System.Collections.Generic.IList{Accord.Imaging.FastRetinaKeypoint})">
            <summary>
              Describes the specified point (i.e. computes and
              sets the orientation and descriptor vector fields
              of the <see cref="T:Accord.Imaging.FastRetinaKeypoint"/>.
            </summary>
            
            <param name="points">The point to be described.</param>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypointDescriptor.IsOrientationNormal">
            <summary>
              Gets or sets whether the orientation is normalized.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypointDescriptor.IsScaleNormal">
            <summary>
              Gets or sets whether the scale is normalized.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypointDescriptor.Extended">
            <summary>
              Gets or sets whether to compute the standard 512-bit 
              descriptors or extended 1024-bit 
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypointDescriptor.Image">
            <summary>
              Gets the <see cref="T:AForge.Imaging.UnmanagedImage"/> of
              the original source's feature detector.
            </summary>
            
            <value>The integral image from where the
            features have been detected.</value>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypointDescriptor.Integral">
            <summary>
              Gets the <see cref="T:AForge.Imaging.IntegralImage"/> of
              the original source's feature detector.
            </summary>
            
            <value>The integral image from where the
            features have been detected.</value>
            
        </member>
        <member name="T:Accord.Imaging.LocalBinaryPattern">
            <summary>
              Local Binary Patterns.
            </summary>
            
            <remarks>
            <para>
               Local binary patterns (LBP) is a type of feature used for classification
               in computer vision. LBP is the particular case of the Texture Spectrum 
               model proposed in 1990. LBP was first described in 1994. It has since 
               been found to be a powerful feature for texture classification; it has
               further been determined that when LBP is combined with the Histogram of
               oriented gradients (HOG) classifier, it improves the detection performance
               considerably on some datasets. </para>
            
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Wikipedia Contributors, "Local Binary Patterns". Available at
                  http://en.wikipedia.org/wiki/Local_binary_patterns </description></item>
              </list>
            </para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.LocalBinaryPattern.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.LocalBinaryPattern"/> class.
            </summary>
            
            <param name="blockSize">
              The size of a block, measured in cells. Default is 3.</param>
            <param name="cellSize">
              The size of a cell, measured in pixels. If set to zero, the entire
              image will be used at once, forming a single block. Default is 6.</param>
            <param name="normalize">
              Whether to normalize generated histograms. Default is true.</param>
            
        </member>
        <member name="M:Accord.Imaging.LocalBinaryPattern.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found features points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.LocalBinaryPattern.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.LocalBinaryPattern.ProcessImage(System.Drawing.Bitmap)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="P:Accord.Imaging.LocalBinaryPattern.CellSize">
            <summary>
              Gets the size of a cell, in pixels.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.LocalBinaryPattern.BlockSize">
            <summary>
              Gets the size of a block, in pixels.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.LocalBinaryPattern.Patterns">
            <summary>
              Gets the set of local binary patterns computed for each
              pixel in the last call to to <see cref="M:Accord.Imaging.LocalBinaryPattern.ProcessImage(System.Drawing.Bitmap)"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.LocalBinaryPattern.Histograms">
            <summary>
              Gets the histogram computed at each cell.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.LocalBinaryPattern.Normalize">
            <summary>
              Gets or sets whether to normalize final 
              histogram feature vectors. Default is true.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.HaralickMode">
            <summary>
              <see cref="T:Accord.Imaging.Haralick"/>'s operation modes.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.HaralickMode.Average">
            <summary>
              Features will be combined using 
              <see cref="M:Accord.Imaging.HaralickDescriptorDictionary.Average(System.Int32)"/>.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.HaralickMode.AverageWithRange">
            <summary>
              Features will be combined using 
              <see cref="M:Accord.Imaging.HaralickDescriptorDictionary.AverageWithRange(System.Int32)"/>.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.HaralickMode.Combine">
            <summary>
              Features will be combined using 
              <see cref="M:Accord.Imaging.HaralickDescriptorDictionary.Combine(System.Int32)"/>.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.HaralickMode.NormalizedAverage">
            <summary>
              Features will be combined using 
              <see cref="M:Accord.Imaging.HaralickDescriptorDictionary.Normalize(System.Int32)"/>.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Haralick">
            <summary>
              Haralick textural feature extractor.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Haralick.#ctor(Accord.Imaging.CooccurrenceDegree[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Haralick"/> class.
            </summary>
            
            <param name="degrees">
              The angulation degrees on which the <see cref="T:Accord.Imaging.HaralickDescriptor">Haralick's
              features</see> should be computed. Default is to use all directions.</param>
            
        </member>
        <member name="M:Accord.Imaging.Haralick.#ctor(System.Int32,System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Haralick"/> class.
            </summary>
            
            <param name="cellSize">
              The size of a computing cell, measured in pixels.
              Default is 0 (use whole image at once).</param>
            <param name="normalize">
              Whether to normalize generated 
              histograms. Default is false.</param>
            
        </member>
        <member name="M:Accord.Imaging.Haralick.#ctor(System.Int32,System.Boolean,Accord.Imaging.CooccurrenceDegree[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Haralick"/> class.
            </summary>
            
            <param name="cellSize">
              The size of a computing cell, measured in pixels.
              Default is 0 (use whole image at once).</param>
            <param name="normalize">
              Whether to normalize generated 
              histograms. Default is true.</param>
            <param name="degrees">
              The angulation degrees on which the <see cref="T:Accord.Imaging.HaralickDescriptor">Haralick's
              features</see> should be computed. Default is to use all directions.</param>
            
        </member>
        <member name="M:Accord.Imaging.Haralick.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found features points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.Haralick.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.Haralick.ProcessImage(System.Drawing.Bitmap)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="P:Accord.Imaging.Haralick.CellSize">
            <summary>
              Gets the size of a cell, in pixels.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Haralick.Degrees">
            <summary>
              Gets the <see cref="T:Accord.Imaging.CooccurrenceDegree"/>s which should
              be computed by this Haralick textural feature extractor.
              Default is <see cref="F:Accord.Imaging.HaralickMode.NormalizedAverage"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Haralick.Mode">
            <summary>
              Gets or sets the mode of operation of this
              <see cref="T:Accord.Imaging.Haralick">Haralick's textural 
              feature extractor</see>. 
            </summary>
            
            <remarks>
              The mode determines how the different features captured
              by the <see cref="T:Accord.Imaging.HaralickDescriptor"/> are combined.
             </remarks>
             
            <value>
              A value from the <see cref="T:Accord.Imaging.HaralickMode"/> enumeration
              specifying how the different features should be combined.
            </value>
            
        </member>
        <member name="P:Accord.Imaging.Haralick.Features">
            <summary>
              Gets or sets the number of features to extract using
              the <see cref="T:Accord.Imaging.HaralickDescriptor"/>. By default, only
              the first 13 original Haralick's features will be used.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Haralick.Descriptors">
            <summary>
              Gets the set of local binary patterns computed for each
              cell in the last call to <see cref="M:Accord.Imaging.Haralick.ProcessImage(System.Drawing.Bitmap)"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Haralick.Matrix">
            <summary>
              Gets the <see cref="T:Accord.Imaging.GrayLevelCooccurrenceMatrix">Gray-level
              Co-occurrence Matrix (GLCM)</see> generated during the last
              call to <see cref="M:Accord.Imaging.Haralick.ProcessImage(AForge.Imaging.UnmanagedImage)"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Haralick.Normalize">
            <summary>
              Gets or sets whether to normalize final 
              histogram feature vectors. Default is false.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.Logarithm">
            <summary>
              Log filter.
            </summary>
            
            <remarks>
              Simple log image filter. Applies the <see cref="M:System.Math.Log(System.Double)"/>
              function for each pixel in the image, clipping values as needed.
              The resultant image can be converted back using the <see cref="T:Accord.Imaging.Filters.Exponential"/>
              filter.
            </remarks>
            
            <example>
            <code>
              Bitmap input = ... 
            
              // Apply log
              Logarithm log = new Logarithm();
              Bitmap output = log.Apply(input);
            
              // Revert log
              Exponential exp = new Exponential();
              Bitmap reconstruction = exp.Apply(output);
            
              // Show results on screen
              ImageBox.Show("input", input);
              ImageBox.Show("output", output);
              ImageBox.Show("reconstruction", reconstruction);
            </code>
            </example>
            
            <seealso cref="T:Accord.Imaging.Filters.Exponential"/>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Logarithm.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.Logarithm"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Logarithm.ProcessFilter(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Logarithm.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.PairsMarker">
            <summary>
              Filter to mark (highlight) pairs of points in a image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PairsMarker.#ctor(AForge.IntPoint[],AForge.IntPoint[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PairsMarker"/> class.
            </summary>
            
            <param name="points1">Set of starting points.</param>
            <param name="points2">Set of corresponding points.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PairsMarker.#ctor(AForge.IntPoint[],AForge.IntPoint[],System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PairsMarker"/> class.
            </summary>
            
            <param name="points1">Set of starting points.</param>
            <param name="points2">Set of corresponding points.</param>
            <param name="markerColor">The color of the lines to be marked.</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PairsMarker.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
               Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PairsMarker.MarkerColor">
            <summary>
              Color used to mark pairs.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PairsMarker.Points1">
            <summary>
              The first set of points.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PairsMarker.Points2">
            <summary>
              The corresponding points to the first set of points.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PairsMarker.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.CornerFeaturesDetector">
            <summary>
              Feature detector based on corners.
            </summary>
            
            <remarks>
              This class can be used as an adapter for classes implementing
              AForge.NET's ICornersDetector interface, so they can be used
              where an <see cref="T:Accord.Imaging.IFeatureDetector`1"/> is needed.
            </remarks>
            
            <example>
              For an example on how to use this class, please take a look
              on the example section for <see cref="T:Accord.Imaging.BagOfVisualWords`1"/>.
            </example>
            
            <seealso cref="T:Accord.Imaging.BagOfVisualWords`1"/>
            
        </member>
        <member name="M:Accord.Imaging.CornerFeaturesDetector.#ctor(AForge.Imaging.ICornersDetector)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.CornerFeaturesDetector"/> class.
            </summary>
            
            <param name="detector">A corners detector.</param>
            
        </member>
        <member name="M:Accord.Imaging.CornerFeaturesDetector.ProcessImage(System.Drawing.Bitmap)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
        </member>
        <member name="M:Accord.Imaging.CornerFeaturesDetector.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
        </member>
        <member name="M:Accord.Imaging.CornerFeaturesDetector.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
        </member>
        <member name="P:Accord.Imaging.CornerFeaturesDetector.Detector">
            <summary>
              Gets the corners detector used to generate features.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.BorderFollowing">
            <summary>
              Border following algorithm for contour extraction.
            </summary>
            
            <example>
            <code>
            // Create a new border following algorithm
            BorderFollowing bf = new BorderFollowing();
            
            // Get all points in the contour of the image. 
            List&lt;IntPoint> contour = bf.FindContour(grayscaleImage);
            
            // Mark all points in the contour point list in blue
            new PointsMarker(contour, Color.Blue).ApplyInPlace(image);
            
            // Show the result
            ImageBox.Show(image);
            </code>
            
            <para>
              The resulting image is shown below.</para>
              
            <img src="..\images\border-following.png" /> 
            
            </example>
            
        </member>
        <member name="M:Accord.Imaging.BorderFollowing.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.BorderFollowing"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.BorderFollowing.#ctor(System.Byte)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.BorderFollowing"/> class.
            </summary>
            
            <param name="threshold">The pixel value threshold above which a pixel
            is considered black (belonging to the object). Default is zero.</param>
            
        </member>
        <member name="M:Accord.Imaging.BorderFollowing.FindContour(System.Drawing.Bitmap)">
            <summary>
            Extracts the contour from a single object in a grayscale image.
            </summary>
            
            <param name="image">A grayscale image.</param>
            <returns>A list of <see cref="T:AForge.IntPoint"/>s defining a contour.</returns>
            
        </member>
        <member name="M:Accord.Imaging.BorderFollowing.FindContour(System.Drawing.Imaging.BitmapData)">
            <summary>
              Extracts the contour from a single object in a grayscale image.
            </summary>
            
            <param name="image">A grayscale image.</param>
            
            <returns>
            A list of <see cref="T:AForge.IntPoint"/>s defining a contour.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.BorderFollowing.FindContour(AForge.Imaging.UnmanagedImage)">
            <summary>
              Extracts the contour from a single object in a grayscale image.
            </summary>
            
            <param name="image">A grayscale image.</param>
            <returns>A list of <see cref="T:AForge.IntPoint"/>s defining a contour.</returns>
            
        </member>
        <member name="P:Accord.Imaging.BorderFollowing.Threshold">
            <summary>
              Gets or sets the pixel value threshold above which a pixel
              is considered white (belonging to the object). Default is zero.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.MatrixH">
            <summary>
              Encapsulates a 3-by-3 general transformation matrix
              that represents a (possibly) non-linear transform. 
            </summary>
            
            <remarks>
            <para>
              Linear transformations are not the only ones that can be represented by
              matrices. Using homogeneous coordinates, both affine transformations and
              perspective projections on R^n can be represented as linear transformations
              on R^n+1 (that is, n+1-dimensional real projective space).</para>
            <para>
              The general transformation matrix has 8 degrees of freedom, as the last
              element is just a scale parameter.</para>  
            </remarks>
            
            <seealso cref="T:Accord.Imaging.RansacHomographyEstimator"/>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.#ctor">
            <summary>
              Creates a new projective matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
              Creates a new projective matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
              Creates a new projective matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.#ctor(System.Single[])">
            <summary>
              Creates a new projective matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.#ctor(System.Double[0:,0:])">
            <summary>
              Creates a new projective matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.#ctor(System.Single[0:,0:])">
            <summary>
              Creates a new projective matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.Reset">
            <summary>
              Resets this matrix to be the identity.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.Inverse">
            <summary>
              Returns the inverse matrix, if this matrix is invertible.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.Transpose">
            <summary>
              Gets the transpose of this transformation matrix.
            </summary>
            
            <returns>The transposed version of this matrix, given by <c>H'</c>.</returns>
        </member>
        <member name="M:Accord.Imaging.MatrixH.TransformPoints(Accord.Imaging.PointH[])">
            <summary>
              Transforms the given points using this transformation matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.TransformPoints(System.Drawing.PointF[])">
            <summary>
              Transforms the given points using this transformation matrix.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.Multiply(Accord.Imaging.MatrixH)">
            <summary>
              Multiplies this matrix, returning a new matrix as result.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.Equals(System.Object)">
            <summary>
              Compares two objects for equality.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.op_Explicit(Accord.Imaging.MatrixH)~System.Double[0:,0:]">
            <summary>
              Double[,] conversion.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.op_Explicit(Accord.Imaging.MatrixH)~System.Single[0:,0:]">
            <summary>
              Single[,] conversion.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.ToDoubleArray">
            <summary>
              Double[,] conversion.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.ToSingleArray">
            <summary>
              Single[,] conversion.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.MatrixH.op_Multiply(Accord.Imaging.MatrixH,Accord.Imaging.MatrixH)">
            <summary>
              Matrix multiplication.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.MatrixH.Elements">
            <summary>
              Gets the elements of this matrix.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.MatrixH.OffsetX">
            <summary>
              Gets the offset x
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.MatrixH.OffsetY">
            <summary>
              Gets the offset y
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.MatrixH.IsInvertible">
            <summary>
              Gets whether this matrix is invertible.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.MatrixH.IsAffine">
            <summary>
              Gets whether this is an Affine transformation matrix.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.MatrixH.IsIdentity">
            <summary>
              Gets whether this is the identity transformation.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.PointsMarker">
            <summary>
              Filter to mark (highlight) points in a image.
            </summary>
            
            <remarks>
            <para>The filter highlights points on the image using a given set of points.</para>
            
            <para>The filter accepts 8 bpp grayscale, 24 and 32 bpp color images for processing.</para>
            </remarks>
            
            <example>
            <para>Sample usage:
            <code>
            // Create a blob contour's instance
            BlobCounter bc = new BlobCounter(image);
            
            // Extract blobs
            Blob[] blobs = bc.GetObjectsInformation();
            bc.ExtractBlobsImage(bmp, blobs[0], true);
            
            // Extract blob's edge points
            List&lt;IntPoint&gt; contour = bc.GetBlobsEdgePoints(blobs[0]);
            
            // Create a green, 2 pixel width points marker's instance
            PointsMarker marker = new PointsMarker(contour, Color.Green, 2);
            
            // Apply the filter in a given color image
            marker.ApplyInPlace(colorBlob);
            </code>
            </para>
            </example>
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Collections.Generic.IList{Accord.Imaging.IFeaturePoint})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Collections.Generic.IList{Accord.Imaging.IFeaturePoint},System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Collections.Generic.IList{Accord.Imaging.IFeaturePoint},System.Drawing.Color,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Collections.Generic.IEnumerable{AForge.IntPoint})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Collections.Generic.IEnumerable{AForge.IntPoint},System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Collections.Generic.IEnumerable{AForge.IntPoint},System.Drawing.Color,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Drawing.Color)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.PointsMarker"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.PointsMarker.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
               Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PointsMarker.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PointsMarker.MarkerColor">
            <summary>
              Color used to mark corners.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PointsMarker.Points">
            <summary>
              Gets or sets the set of points to mark.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.PointsMarker.Width">
            <summary>
              Gets or sets the width of the points to be drawn.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Moments.CentralMoments">
             <summary>
               Central image moments.
             </summary>
            
             <remarks>
             <para>
               In image processing, computer vision and related fields, an image moment is
               a certain particular weighted average (moment) of the image pixels' intensities,
               or a function of such moments, usually chosen to have some attractive property 
               or interpretation.</para>
            
             <para>
               Image moments are useful to describe objects after segmentation. Simple properties 
               of the image which are found via image moments include area (or total intensity), 
               its centroid, and information about its orientation.</para>
               
             <para>
               The central moments can be used to find the location, center of mass and the 
               dimensions of a given object within an image.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Wikipedia contributors. "Image moment." Wikipedia, The Free Encyclopedia. Wikipedia,
                   The Free Encyclopedia. Available at http://en.wikipedia.org/wiki/Image_moment </description></item>
               </list>
             </para>
             </remarks>
             
             <example>
             <code>
             Bitmap image = ...;
            
             // Compute the center moments of up to third order
             CentralMoments cm = new CentralMoments(image, order: 3);
             
             // Get size and orientation of the image
             SizeF size = target.GetSize();
             float angle = target.GetOrientation();
             </code>
             </example>
             
             <seealso cref="T:Accord.Imaging.Moments.RawMoments"/>
             <seealso cref="T:Accord.Imaging.Moments.HuMoments"/>
             
        </member>
        <member name="F:Accord.Imaging.Moments.CentralMoments.DefaultOrder">
            <summary>
              Gets the default maximum moment order.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.CentralMoments"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.#ctor(Accord.Imaging.Moments.RawMoments)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.CentralMoments"/> class.
            </summary>
            
            <param name="moments">The raw moments to construct central moments.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.#ctor(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.CentralMoments"/> class.
            </summary>
            
            <param name="order">The maximum order for the moments.</param>
            <param name="image">The image whose moments should be computed.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.#ctor(System.Single[0:,0:],System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.CentralMoments"/> class.
            </summary>
            
            <param name="order">The maximum order for the moments.</param>
            <param name="image">The image whose moments should be computed.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.#ctor(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.CentralMoments"/> class.
            </summary>
            
            <param name="order">The maximum order for the moments.</param>
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.#ctor(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.CentralMoments"/> class.
            </summary>
            
            <param name="order">The maximum order for the moments.</param>
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.#ctor(System.Single[0:,0:],System.Drawing.Rectangle,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.CentralMoments"/> class.
            </summary>
            
            <param name="order">The maximum order for the moments.</param>
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.Compute(Accord.Imaging.Moments.RawMoments)">
            <summary>
              Computes the center moments from the specified raw moments.
            </summary>
            
            <param name="moments">The raw moments to use as base of calculations.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.Compute(System.Single[0:,0:],System.Drawing.Rectangle)">
            <summary>
              Computes the center moments for the specified image.
            </summary>
            
            <param name="image">The image.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.Compute(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the center moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.GetSize">
            <summary>
              Gets the size of the ellipse containing the image.
            </summary>
            
            <returns>The size of the ellipse containing the image.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.GetOrientation">
            <summary>
              Gets the orientation of the ellipse containing the image.
            </summary>
            
            <returns>The angle of orientation of the ellipse, in radians.</returns>
            
        </member>
        <member name="M:Accord.Imaging.Moments.CentralMoments.GetSizeAndOrientation(System.Single@)">
            <summary>
              Gets both size and orientation of the ellipse containing the image.
            </summary>
            
            <param name="angle">The angle of orientation of the ellipse, in radians.</param>
            <returns>The size of the ellipse containing the image.</returns>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu00">
            <summary>
              Central moment of order (0,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu10">
            <summary>
              Central moment of order (1,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu01">
            <summary>
              Central moment of order (0,1).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu11">
            <summary>
              Central moment of order (1,1).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu20">
            <summary>
              Central moment of order (2,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu02">
            <summary>
              Central moment of order (0,2).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu21">
            <summary>
              Central moment of order (2,1).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu12">
            <summary>
              Central moment of order (1,2).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu30">
            <summary>
              Central moment of order (3,0).
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.CentralMoments.Mu03">
            <summary>
              Central moment of order (0,3).
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.HistogramsOfOrientedGradients">
            <summary>
              Histograms of Oriented Gradients [experimental].
            </summary>
            
            <remarks>
            <para>
              This class is currently very experimental. Use with care.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Navneet Dalal and Bill Triggs, "Histograms of Oriented Gradients for Human Detection",
                  CVPR 2005. Available at: <a href="http://lear.inrialpes.fr/people/triggs/pubs/Dalal-cvpr05.pdf">
                  http://lear.inrialpes.fr/people/triggs/pubs/Dalal-cvpr05.pdf </a> </description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.HistogramsOfOrientedGradients.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.HistogramsOfOrientedGradients"/> class.
            </summary>
            
            <param name="numberOfBins">The number of histogram bins.</param>
            <param name="blockSize">The size of a block, measured in cells.</param>
            <param name="cellSize">The size of a cell, measured in pixels.</param>
            
        </member>
        <member name="M:Accord.Imaging.HistogramsOfOrientedGradients.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.HistogramsOfOrientedGradients.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.HistogramsOfOrientedGradients.ProcessImage(System.Drawing.Bitmap)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="P:Accord.Imaging.HistogramsOfOrientedGradients.CellSize">
            <summary>
              Gets the size of a cell, in pixels.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HistogramsOfOrientedGradients.BlockSize">
            <summary>
              Gets the size of a block, in pixels.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HistogramsOfOrientedGradients.NumberOfBins">
            <summary>
              Gets the number of histogram bins.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HistogramsOfOrientedGradients.Direction">
            <summary>
              Gets the matrix of orientations generated in 
              the last call to <see cref="M:Accord.Imaging.HistogramsOfOrientedGradients.ProcessImage(System.Drawing.Bitmap)"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HistogramsOfOrientedGradients.Magnitude">
            <summary>
              Gets the matrix of magnitudes generated in 
              the last call to <see cref="M:Accord.Imaging.HistogramsOfOrientedGradients.ProcessImage(System.Drawing.Bitmap)"/>.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HistogramsOfOrientedGradients.Histograms">
            <summary>
              Gets the histogram computed at each cell.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.HistogramsOfOrientedGradients.Normalize">
            <summary>
              Gets or sets whether to normalize final 
              histogram feature vectors. Default is true.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.UnsafeTools">
            <summary>
              Static tool functions for imaging.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.UnsafeTools.Sum(System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>
              Computes the sum of all pixels 
              within a given image region.
            </summary>
            
            <param name="src">The image region.</param>
            <param name="width">The region width.</param>
            <param name="height">The region height.</param>
            <param name="stride">The image stride.</param>
            
            <returns>The sum of all pixels within the region.</returns>
            
        </member>
        <member name="M:Accord.Imaging.UnsafeTools.Mean(System.Byte*,System.Int32,System.Int32,System.Int32)">
            <summary>
              Computes the mean pixel value 
              within a given image region.
            </summary>
            
            <param name="src">The image region.</param>
            <param name="width">The region width.</param>
            <param name="height">The region height.</param>
            <param name="stride">The image stride.</param>
            
            <returns>The mean pixel value within the region.</returns>
            
        </member>
        <member name="M:Accord.Imaging.UnsafeTools.Scatter(System.Byte*,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
              Computes the pixel scatter 
              within a given image region.
            </summary>
            
            <param name="src">The image region.</param>
            <param name="width">The region width.</param>
            <param name="height">The region height.</param>
            <param name="stride">The image stride.</param>
            <param name="mean">The region pixel mean.</param>
            
            <returns>The scatter value within the region.</returns>
            
        </member>
        <member name="M:Accord.Imaging.UnsafeTools.Variance(System.Byte*,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
              Computes the pixel variance 
              within a given image region.
            </summary>
            
            <param name="src">The image region.</param>
            <param name="width">The region width.</param>
            <param name="height">The region height.</param>
            <param name="stride">The image stride.</param>
            <param name="mean">The region pixel mean.</param>
            
            <returns>The variance value within the region.</returns>
            
        </member>
        <member name="T:Accord.Imaging.Moments.HuMoments">
             <summary>
               Hu's set of invariant image moments.
             </summary>
             
             <remarks>
             <para>
               In image processing, computer vision and related fields, an image moment is
               a certain particular weighted average (moment) of the image pixels' intensities,
               or a function of such moments, usually chosen to have some attractive property 
               or interpretation.</para>
            
             <para>
               Image moments are useful to describe objects after segmentation. Simple properties 
               of the image which are found via image moments include area (or total intensity), 
               its centroid, and information about its orientation.</para>
               
             <para>
               Hu's set of invariant moments are invariant under translation, changes in scale, 
               and also rotation. The first moment, <see cref="P:Accord.Imaging.Moments.HuMoments.I1"/>, is analogous to the moment 
               of inertia around the image's centroid, where the pixels' intensities are analogous
               to physical density. The last one, I7, is skew invariant, which enables it to distinguish
               mirror images of otherwise identical images.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Wikipedia contributors. "Image moment." Wikipedia, The Free Encyclopedia. Wikipedia,
                   The Free Encyclopedia. Available at http://en.wikipedia.org/wiki/Image_moment </description></item>
               </list>
             </para>
             </remarks>
             
             <example>
             <code>
             Bitmap image = ...;
            
             // Compute the Hu moments of up to third order
             HuMoments hu = new HuMoments(image, order: 3);
             </code>
             </example>
             
             <seealso cref="T:Accord.Imaging.Moments.RawMoments"/>
             <seealso cref="T:Accord.Imaging.Moments.CentralMoments"/>
             
        </member>
        <member name="M:Accord.Imaging.Moments.HuMoments.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.HuMoments"/> class.
            </summary>
            
            <param name="order">The maximum moment order to be computed.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.HuMoments.#ctor(System.Drawing.Bitmap,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.HuMoments"/> class.
            </summary>
            
            <param name="order">The maximum moment order to be computed.</param>
            <param name="image">The image whose moments should be computed.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.HuMoments.#ctor(System.Single[0:,0:],System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Moments.HuMoments"/> class.
            </summary>
            
            <param name="order">The maximum order for the moments.</param>
            <param name="image">The image whose moments should be computed.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.HuMoments.Compute(Accord.Imaging.Moments.CentralMoments)">
            <summary>
              Computes the Hu moments from the specified central moments.
            </summary>
            
            <param name="moments">The central moments to use as base of calculations.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.HuMoments.Compute(AForge.Imaging.UnmanagedImage,System.Drawing.Rectangle)">
            <summary>
              Computes the center moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="M:Accord.Imaging.Moments.HuMoments.Compute(System.Single[0:,0:],System.Drawing.Rectangle)">
            <summary>
              Computes the center moments for the specified image.
            </summary>
            
            <param name="image">The image whose moments should be computed.</param>
            <param name="area">The region of interest in the image to compute moments for.</param>
            
        </member>
        <member name="P:Accord.Imaging.Moments.HuMoments.I1">
            <summary>
              Hu moment of order 1.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.HuMoments.I2">
            <summary>
              Hu moment of order 2.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.HuMoments.I3">
            <summary>
              Hu moment of order 3.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.HuMoments.I4">
            <summary>
              Hu moment of order 4.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.HuMoments.I5">
            <summary>
              Hu moment of order 5.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.HuMoments.I6">
            <summary>
              Hu moment of order 6.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Moments.HuMoments.I7">
            <summary>
              Hu moment of order 7.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.FastRetinaKeypoint">
            <summary>
              Fast Retina Keypoint (FREAK) point.
            </summary>
            
            <remarks>
              In order to extract feature points from an image using FREAK,
              please take a look on the <see cref="T:Accord.Imaging.FastRetinaKeypointDetector"/>
              documentation page.
            </remarks>
            
            <seealso cref="T:Accord.Imaging.FastRetinaKeypointDescriptor"/>
            <seealso cref="T:Accord.Imaging.FastRetinaKeypointDetector"/>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypoint.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.FastRetinaKeypoint"/> class.
            </summary>
            
            <param name="x">The x-coordinate of the point in the image.</param>
            <param name="y">The y-coordinate of the point in the image.</param>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypoint.ToHex">
            <summary>
              Converts the binary descriptor to 
              string of hexadecimal values.
            </summary>
            
            <returns>A string containing an hexadecimal
            value representing this point's descriptor.</returns>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypoint.ToBinary">
            <summary>
              Converts the binary descriptor
              to a string of binary values.
            </summary>
            
            <returns>A string containing a binary value
            representing this point's descriptor.</returns>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypoint.ToBase64">
            <summary>
              Converts the binary descriptor to base64.
            </summary>
            
            <returns>A string containing the base64 
            representation of the descriptor.</returns>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypoint.ToIntPoint">
            <summary>
              Converts the feature point to a <see cref="T:AForge.IntPoint"/>.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypoint.ToPoint">
            <summary>
              Converts this object into a <see cref="T:AForge.IntPoint"/>.
            </summary>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypoint.ToPointF">
            <summary>
              Converts this object into a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypoint.op_Implicit(Accord.Imaging.FastRetinaKeypoint)~System.Drawing.Point">
            <summary>
              Performs an implicit conversion from <see cref="T:Accord.Imaging.FastRetinaKeypoint"/>
              to <see cref="T:System.Drawing.Point"/>.
            </summary>
            
            <param name="point">The point to be converted.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypoint.op_Implicit(Accord.Imaging.FastRetinaKeypoint)~System.Drawing.PointF">
            <summary>
              Performs an implicit conversion from <see cref="T:Accord.Imaging.FastRetinaKeypoint"/>
              to <see cref="T:System.Drawing.PointF"/>.
            </summary>
            
            <param name="point">The point to be converted.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.Imaging.FastRetinaKeypoint.op_Implicit(Accord.Imaging.FastRetinaKeypoint)~AForge.IntPoint">
            <summary>
              Performs an implicit conversion from <see cref="T:Accord.Imaging.FastRetinaKeypoint"/>
              to <see cref="T:AForge.IntPoint"/>.
            </summary>
            
            <param name="point">The point to be converted.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypoint.X">
            <summary>
              Gets or sets the x-coordinate of this point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypoint.Y">
            <summary>
              Gets or sets the y-coordinate of this point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypoint.Scale">
            <summary>
              Gets or sets the scale of the point.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypoint.Orientation">
            <summary>
              Gets or sets the orientation of this point in angles.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.FastRetinaKeypoint.Descriptor">
            <summary>
              Gets or sets the descriptor vector
              associated with this point.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor">
             <summary>
               Speeded-Up Robust Features (SURF) Descriptor.
             </summary>
             
             <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/>
             <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.#ctor(AForge.Imaging.IntegralImage)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor"/> class.
            </summary>
            
            <param name="integralImage">
              The integral image which is the source of the feature points.
            </param>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.Compute(Accord.Imaging.SpeededUpRobustFeaturePoint)">
            <summary>
              Describes the specified point (i.e. computes and
              sets the orientation and descriptor vector fields
              of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>.
            </summary>
            
            <param name="point">The point to be described.</param>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.Compute(System.Collections.Generic.IEnumerable{Accord.Imaging.SpeededUpRobustFeaturePoint})">
            <summary>
              Describes all specified points (i.e. computes and
              sets the orientation and descriptor vector fields
              of each <see cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>.
            </summary>
            
            <param name="points">The list of points to be described.</param>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.GetOrientation(Accord.Imaging.SpeededUpRobustFeaturePoint)">
            <summary>
              Determine dominant orientation for the feature point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.GetOrientation(System.Int32,System.Int32,System.Int32)">
            <summary>
              Determine dominant orientation for feature point.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.GetDescriptor(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
              Construct descriptor vector for this interest point
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.gaussian(System.Int32,System.Int32,System.Double)">
            <summary>
              Get the value of the Gaussian with std dev sigma at the point (x,y)
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.gaussian(System.Double,System.Double,System.Double)">
            <summary>
              Get the value of the Gaussian with std dev sigma at the point (x,y)
            </summary>
        </member>
        <member name="F:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.gauss25">
            <summary>
              Gaussian look-up table for sigma = 2.5
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
              A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.Invariant">
            <summary>
              Gets or sets a value indicating whether the features
              described by this <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor"/> should
              be invariant to rotation. Default is true.
            </summary>
            
            <value><c>true</c> for rotation invariant features; <c>false</c> otherwise.</value>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.Extended">
            <summary>
              Gets or sets a value indicating whether the features
              described by this <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor"/> should
              be computed in extended form. Default is false.
            </summary>
            
            <value><c>true</c> for extended features; <c>false</c> otherwise.</value>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDescriptor.Image">
            <summary>
              Gets the <see cref="T:AForge.Imaging.IntegralImage"/> of
              the original source's feature detector.
            </summary>
            
            <value>The integral image from where the
            features have been detected.</value>
            
        </member>
        <member name="T:Accord.Imaging.Filters.Concatenate">
            <summary>
              Concatenation filter.
            </summary>
            
            <remarks>
              Concatenates two images side by side in a single image.
            </remarks>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Concatenate.#ctor(System.Drawing.Bitmap)">
            <summary>
              Creates a new concatenation filter.
            </summary>
            <param name="overlayImage">The first image to concatenate.</param>
        </member>
        <member name="M:Accord.Imaging.Filters.Concatenate.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
              Calculates new image size.
            </summary>
        </member>
        <member name="M:Accord.Imaging.Filters.Concatenate.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
               Process the filter on the specified image.
             </summary>
             
             <param name="sourceData">Source image data.</param>
             <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Concatenate.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
        </member>
        <member name="T:Accord.Imaging.Filters.Blend">
            <summary>
              Linear Gradient Blending filter.
            </summary>
            
            <remarks>
            <para>
              The blending filter is able to blend two images using a homography matrix.
              A linear alpha gradient is used to smooth out differences between the two
              images, effectively blending them in two images. The gradient is computed
              considering the distance between the centers of the two images.</para>
            <para>
            
              The first image should be passed at the moment of creation of the Blending
              filter as the overlay image. A second image may be projected on top of the
              overlay image by calling the Apply method and passing the second image as
              argument.</para>  
              
            <para>
              Currently the filter always produces 32bpp images, disregarding the format
              of source images. The alpha layer is used as an intermediate mask in the
              blending process.</para>  
            </remarks>
            
            <example>
            <code>
            // Let's start with two pictures that have been
            // taken from slightly different points of view:
            //
            Bitmap img1 = Resources.dc_left;
            Bitmap img2 = Resources.dc_right;
            
            // Those pictures are shown below:
            ImageBox.Show(img1, PictureBoxSizeMode.Zoom, 640, 480);
            ImageBox.Show(img2, PictureBoxSizeMode.Zoom, 640, 480);
            </code>
            
            <img src="..\images\panorama-1.png"/> 
            <img src="..\images\panorama-2.png"/> 
            
            <code>
            // Step 1: Detect feature points using Surf Corners Detector
            var surf = new SpeededUpRobustFeaturesDetector();
            
            var points1 = surf.ProcessImage(img1);
            var points2 = surf.ProcessImage(img2);
            
            // Step 2: Match feature points using a k-NN
            var matcher = new KNearestNeighborMatching(5);
            var matches = matcher.Match(points1, points2);
            
            // Step 3: Create the matrix using a robust estimator
            var ransac = new RansacHomographyEstimator(0.001, 0.99);
            MatrixH homographyMatrix = ransac.Estimate(matches);
            
            // Step 4: Project and blend using the homography
            Blend blend = new Blend(homographyMatrix, img1);
            
            
            // Compute the blending algorithm
            Bitmap result = blend.Apply(img2);
            
            // Show on screen
            ImageBox.Show(result, PictureBoxSizeMode.Zoom, 640, 480);
            </code>
            
            <para>
              The resulting image is shown below. </para>
              
            <img src="..\images\panorama-3.png"/> 
            </example>
            
            <seealso cref="T:Accord.Imaging.RansacHomographyEstimator"/>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Blend.#ctor(System.Double[0:,0:],System.Drawing.Bitmap)">
            <summary>
              Constructs a new Blend filter.
            </summary>
            
            <param name="homography">The homography matrix mapping a second image to the overlay image.</param>
            <param name="overlayImage">The overlay image (also called the anchor).</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Blend.#ctor(System.Drawing.Bitmap)">
            <summary>
              Constructs a new Blend filter.
            </summary>
            
            <param name="overlayImage">The overlay image (also called the anchor).</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Blend.#ctor(Accord.Imaging.MatrixH,System.Drawing.Bitmap)">
            <summary>
              Constructs a new Blend filter.
            </summary>
            
            <param name="homography">The homography matrix mapping a second image to the overlay image.</param>
            <param name="overlayImage">The overlay image (also called the anchor).</param>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Blend.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
              Computes the new image size.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Blend.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the image filter.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Blend.distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
              Computes a distance metric used to compute the blending mask
            </summary>
        </member>
        <member name="P:Accord.Imaging.Filters.Blend.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Blend.Homography">
            <summary>
              Gets or sets the Homography matrix used to map a image passed to
              the filter to the overlay image specified at filter creation.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Blend.FillColor">
            <summary>
              Gets or sets the filling color used to fill blank spaces.
            </summary>
            
            <remarks>
              The filling color will only be visible after the image is converted
              to 24bpp. The alpha channel will be used internally by the filter.
            </remarks>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Blend.Gradient">
            <summary>
              Gets or sets a value indicating whether to blend using a linear
              gradient or just superimpose the two images with equal weights.
            </summary>
            
            <value><c>true</c> to create a gradient; otherwise, <c>false</c>. Default is true.</value>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Blend.AlphaOnly">
            <summary>
              Gets or sets a value indicating whether only the alpha channel
              should be blended. This can be used together with a transparency
              mask to selectively blend only portions of the image.
            </summary>
            
            <value><c>true</c> to blend only the alpha channel; otherwise, <c>false</c>. Default is false.</value>
            
        </member>
        <member name="T:Accord.Imaging.Filters.CombineChannel">
            <summary>
              Combine channel filter.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.CombineChannel.#ctor(AForge.Imaging.UnmanagedImage[])">
            <summary>
              Constructs a new CombineChannel filter.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.CombineChannel.ProcessFilter(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.CombineChannel.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
            <remarks>
              <para>The dictionary defines, which pixel formats are supported for
              source images and which pixel format will be used for resulting image.</para>
            
              <para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
              for more information.</para>
            </remarks>
            
        </member>
        <member name="T:Accord.Imaging.SpeededUpRobustFeatureDescriptorType">
            <summary>
              SURF Feature descriptor types.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.SpeededUpRobustFeatureDescriptorType.None">
            <summary>
              Do not compute descriptors.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.SpeededUpRobustFeatureDescriptorType.Standard">
            <summary>
              Compute standard descriptors.
            </summary>
            
        </member>
        <member name="F:Accord.Imaging.SpeededUpRobustFeatureDescriptorType.Extended">
            <summary>
              Compute extended descriptors.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.SpeededUpRobustFeaturesDetector">
             <summary>
               Speeded-up Robust Features (SURF) detector.
             </summary>
             
             <remarks>
             <para>
               Based on original implementation in the OpenSURF computer vision library
               by Christopher Evans (http://www.chrisevansdev.com). Used under the LGPL
               with permission of the original author.</para>
               
             <para>
               Be aware that the SURF algorithm is a patented algorithm by Anael Orlinski.
               If you plan to use it in a commercial application, you may have to acquire
               a license from the patent holder.</para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   E. Christopher. Notes on the OpenSURF Library. Available in: 
                   http://sites.google.com/site/chrisevansdev/files/opensurf.pdf</description></item>
                 <item><description>
                   P. D. Kovesi. MATLAB and Octave Functions for Computer Vision and Image Processing.
                   School of Computer Science and Software Engineering, The University of Western Australia.
                   Available in: http://www.csse.uwa.edu.au/~pk/Research/MatlabFns/Spatial/harris.m</description></item>
               </list>
             </para>
             </remarks>
            
             <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturePoint"/>
             <seealso cref="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor"/>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.#ctor(System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/> class.
            </summary>
            
            <param name="threshold">
              The non-maximum suppression threshold. Default is 0.0002f.</param>
              
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.#ctor(System.Single,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDetector"/> class.
            </summary>
            
            <param name="threshold">
              The non-maximum suppression threshold. Default is 0.0002f.</param>
            <param name="octaves">
              The number of octaves to use when building the <see cref="T:Accord.Imaging.ResponseLayerCollection">
              response filter</see>. Each octave corresponds to a series of maps covering a
              doubling of scale in the image. Default is 5.</param>
            <param name="initial">
              The initial step to use when building the <see cref="T:Accord.Imaging.ResponseLayerCollection">
              response filter</see>. Default is 2. </param>
              
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.GetDescriptor">
            <summary>
              Gets the <see cref="T:Accord.Imaging.SpeededUpRobustFeaturesDescriptor">
              feature descriptor</see> for the last processed image.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.ProcessImage(System.Drawing.Bitmap)">
            <summary>
              Process image looking for interest points.
            </summary>
            
            <param name="image">Source image data to process.</param>
            
            <returns>Returns list of found interest points.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">
              The source image has incorrect pixel format.
            </exception>
            
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.AForge#Imaging#ICornersDetector#ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
            Process image looking for corners.
            </summary>
            <param name="image">Unmanaged source image to process.</param>
            <returns>
            Returns list of found corners (X-Y coordinates).
            </returns>
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.AForge#Imaging#ICornersDetector#ProcessImage(System.Drawing.Imaging.BitmapData)">
            <summary>
            Process image looking for corners.
            </summary>
            <param name="imageData">Source image data to process.</param>
            <returns>
            Returns list of found corners (X-Y coordinates).
            </returns>
        </member>
        <member name="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.AForge#Imaging#ICornersDetector#ProcessImage(System.Drawing.Bitmap)">
            <summary>
            Process image looking for corners.
            </summary>
            <param name="image">Source image to process.</param>
            <returns>
            Returns list of found corners (X-Y coordinates).
            </returns>
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.ComputeOrientation">
            <summary>
              Gets or sets a value indicating whether all feature points
              should have their orientation computed after being detected.
              Default is true.
            </summary>
            
            <remarks>Computing orientation requires additional processing; 
            set this property to false to compute the orientation of only
            selected points by using the <see cref="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.GetDescriptor">
            current feature descriptor</see> for the last set of detected points.
            </remarks>
            
            <value><c>true</c> if to compute orientation; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.ComputeDescriptors">
            <summary>
              Gets or sets a value indicating whether all feature points
              should have their descriptors computed after being detected.
              Default is to compute standard descriptors.
            </summary>
            
            <remarks>Computing descriptors requires additional processing; 
            set this property to false to compute the descriptors of only
            selected points by using the <see cref="M:Accord.Imaging.SpeededUpRobustFeaturesDetector.GetDescriptor">
            current feature descriptor</see> for the last set of detected points.
            </remarks>
            
            <value><c>true</c> if to compute orientation; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.Threshold">
            <summary>
              Gets or sets the non-maximum suppression
              threshold. Default is 0.0002.
            </summary>
            
            <value>The non-maximum suppression threshold.</value>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.Octaves">
            <summary>
              Gets or sets the number of octaves to use when building
              the <see cref="T:Accord.Imaging.ResponseLayerCollection">response filter</see>.
              Each octave corresponds to a series of maps covering a
              doubling of scale in the image. Default is 5.
            </summary>
            
        </member>
        <member name="P:Accord.Imaging.SpeededUpRobustFeaturesDetector.Step">
            <summary>
              Gets or sets the initial step to use when building
              the <see cref="T:Accord.Imaging.ResponseLayerCollection">response filter</see>.
              Default is 2.
            </summary>
            
        </member>
        <member name="T:Accord.Imaging.Filters.Exponential">
            <summary>
              Exponential filter.
            </summary>
            
            <remarks>
              Simple exp image filter. Applies the <see cref="M:System.Math.Exp(System.Double)"/>
              function for each pixel in the image, clipping values as needed.
              The resultant image can be converted back using the <see cref="T:Accord.Imaging.Filters.Logarithm"/>
              filter.
            </remarks>
            
            <example>
            <code>
              Bitmap input = ... 
            
              // Apply log
              Logarithm log = new Logarithm();
              Bitmap output = log.Apply(input);
            
              // Revert log
              Exponential exp = new Exponential();
              Bitmap reconstruction = exp.Apply(output);
            
              // Show results on screen
              ImageBox.Show("input", input);
              ImageBox.Show("output", output);
              ImageBox.Show("reconstruction", reconstruction);
            </code>
            </example>
            
            <seealso cref="T:Accord.Imaging.Filters.Logarithm"/>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Exponential.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Imaging.Filters.Exponential"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Imaging.Filters.Exponential.ProcessFilter(AForge.Imaging.UnmanagedImage)">
            <summary>
              Process the filter on the specified image.
            </summary>
            
            <param name="image">Source image data.</param>
            
        </member>
        <member name="P:Accord.Imaging.Filters.Exponential.FormatTranslations">
            <summary>
              Format translations dictionary.
            </summary>
            
        </member>
    </members>
</doc>
