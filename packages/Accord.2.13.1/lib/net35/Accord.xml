<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Accord</name>
    </assembly>
    <members>
        <member name="T:Accord.CancellationToken">
            <summary>
              Minimum CancellationToken implementation for .NET 3.5 to
              make Accord.NET work. This is not a complete implementation.
            </summary>
            
        </member>
        <member name="P:Accord.CancellationToken.CanBeCancelled">
            <summary>
              Gets or sets a value indicating whether this instance can be cancelled.
            </summary>
            
        </member>
        <member name="P:Accord.CancellationToken.IsCancellationRequested">
            <summary>
              Gets or sets a value indicating whether cancellation has been requested.
            </summary>
            
        </member>
        <member name="P:Accord.CancellationToken.None">
            <summary>
              Gets an empty token.
            </summary>
            
        </member>
        <member name="T:Accord.Extensions">
            <summary>
              Static class for utility extension methods.
            </summary>
            
        </member>
        <member name="M:Accord.Extensions.Add(System.Data.DataColumnCollection,System.String[])">
            <summary>
              Creates and adds multiple <see cref="T:System.Data.DataColumn"/>
              objects with the given names at once.
            </summary>
            
            <param name="collection">The <see cref="T:System.Data.DataColumnCollection"/>
            to add in.</param>
            <param name="columnNames">The names of the <see cref="T:System.Data.DataColumn"/> to
            be created and added.</param>
            
            <example>
              <code>
              DataTable table = new DataTable();
              
              // Add multiple columns at once:
              table.Columns.Add("columnName1", "columnName2");
              </code>
            </example>
            
        </member>
        <member name="M:Accord.Extensions.GetDescription``1(``0)">
            <summary>
              Gets a the value of a <see cref="T:System.ComponentModel.DescriptionAttribute"/>
              associated with a particular enumeration value.
            </summary>
            
            <typeparam name="T">The enumeration type.</typeparam>
            <param name="source">The enumeration value.</param>
            
            <returns>The string value stored in the value's description attribute.</returns>
            
        </member>
        <member name="M:Accord.Extensions.Read``1(System.IO.BinaryReader,``0@)">
            <summary>
              Reads a <c>struct</c> from a stream.
            </summary>
            
        </member>
        <member name="M:Accord.Extensions.GetPosition(System.IO.StreamReader)">
            <summary>
              Gets the underlying buffer position for a StreamReader.
            </summary>
            
            <param name="reader">A StreamReader whose position will be retrieved.</param>
            
            <returns>The current offset from the beginning of the 
              file that the StreamReader is currently located into.</returns>
            
        </member>
        <member name="T:System.Collections.Generic.ISet`1">
            <summary>
              Minimum ISet implementation for .NET 3.5 to
              make Accord.NET work. This is not a complete implementation.
            </summary>
            
        </member>
        <member name="M:System.Collections.Generic.ISet`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Collections.Generic.ISet`1"/> class.
            </summary>
            
        </member>
        <member name="M:System.Collections.Generic.ISet`1.#ctor(System.Collections.Generic.HashSet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ISet`1"/> class.
            </summary>
            
            <param name="set">The set.</param>
            
        </member>
        <member name="M:System.Collections.Generic.ISet`1.op_Implicit(System.Collections.Generic.HashSet{`0})~System.Collections.Generic.ISet{`0}">
            <summary>
              Performs an implicit conversion from <see cref="T:System.Collections.Generic.HashSet`1"/> to <see cref="T:System.Collections.Generic.ISet`1"/>.
            </summary>
            
            <param name="set">The set.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:System.Collections.Generic.ISet`1.op_Implicit(System.Collections.Generic.ISet{`0})~System.Collections.Generic.HashSet{`0}">
            <summary>
              Performs an implicit conversion from <see cref="T:System.Collections.Generic.ISet`1"/> to <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            
            <param name="set">The set.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
            <summary>
              Adds the specified item.
            </summary>
            
            <param name="item">The item.</param>
            
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Clear">
            <summary>
              Clears this instance.
            </summary>
            
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Contains(`0)">
            <summary>
              Determines whether this instance contains the specified item.
            </summary>
            
            <param name="item">The item.</param>
            
            <returns>
              <c>true</c> if the set contains the specified item; otherwise, <c>false</c>.
            </returns>
            
        </member>
        <member name="M:System.Collections.Generic.ISet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this set to an array.
            </summary>
            
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            
        </member>
        <member name="M:System.Collections.Generic.ISet`1.Remove(`0)">
            <summary>
              Removes the specified item.
            </summary>
            
            <param name="item">The item.</param>
            
        </member>
        <member name="M:System.Collections.Generic.ISet`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:System.Collections.Generic.ISet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.ISet{`0})">
            <summary>
              Determines whether this set contains the 
              exact same elements as another set.
            </summary>
            
            <param name="set">The other set.</param>
            
        </member>
        <member name="P:System.Collections.Generic.ISet`1.Count">
            <summary>
              Gets the number of elements in this set.
            </summary>
            
        </member>
        <member name="P:System.Collections.Generic.ISet`1.IsReadOnly">
            <summary>
              Gets a value indicating whether this instance is read only.
            </summary>
            
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
            
        </member>
        <member name="T:Accord.NonPositiveDefiniteMatrixException">
            <summary>
              Non-Positive Definite Matrix Exception.
            </summary>
            
            <remarks><para>The non-positive definite matrix exception is thrown in cases where a method 
            expects a matrix to have only positive eigenvalues, such when dealing with covariance matrices.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.NonPositiveDefiniteMatrixException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonPositiveDefiniteMatrixException"/> class.
            </summary>
        </member>
        <member name="M:Accord.NonPositiveDefiniteMatrixException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonPositiveDefiniteMatrixException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:Accord.NonPositiveDefiniteMatrixException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonPositiveDefiniteMatrixException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:Accord.NonPositiveDefiniteMatrixException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonPositiveDefiniteMatrixException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            
        </member>
        <member name="T:Accord.Lazy`1">
            <summary>
              Minimum Lazy implementation for .NET 3.5 to make
              Accord.NET work. This is not a complete implementation.
            </summary>
            
        </member>
        <member name="M:Accord.Lazy`1.#ctor(System.Func{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Lazy`1"/> class.
            </summary>
            
            <param name="valueFactory">A function which creates the instance value on first access.</param>
            
        </member>
        <member name="M:Accord.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Lazy`1"/> class.
            </summary>
            
            <param name="valueFactory">A function which creates the instance value on first access.</param>
            <param name="isThreadSafe">Needs to be true.</param>
            
        </member>
        <member name="M:Accord.Lazy`1.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
            
        </member>
        <member name="P:Accord.Lazy`1.Value">
            <summary>
              Gets the lazily initialized value for this instance.
            </summary>
            
        </member>
        <member name="P:Accord.Lazy`1.IsValueCreated">
            <summary>
              Gets a value that indicates whether a value has been created for this Lazy{T} instance.
            </summary>
            
        </member>
        <member name="T:Accord.DimensionMismatchException">
             <summary>
               Dimension Mismatch Exception.
             </summary>
            
             <remarks><para>The dimension mismatch exception is thrown in cases where a method expects 
             a matrix or array object having specific or compatible dimensions, such as the inner matrix
             dimensions in matrix multiplication.</para>
             </remarks>
            
        </member>
        <member name="M:Accord.DimensionMismatchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.DimensionMismatchException"/> class.
            </summary>
        </member>
        <member name="M:Accord.DimensionMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.DimensionMismatchException"/> class.
            </summary>
            
            <param name="paramName">The name of the parameter that caused the current exception.</param>
            
        </member>
        <member name="M:Accord.DimensionMismatchException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.DimensionMismatchException"/> class.
            </summary>
            
            <param name="paramName">The name of the parameter that caused the current exception.</param>
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:Accord.DimensionMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.DimensionMismatchException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:Accord.DimensionMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.DimensionMismatchException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            
        </member>
        <member name="T:System.AggregateException">
            <summary>
              Minimum AggregateException implementation for .NET 3.5 to
              make Accord.NET work. This is not a complete implementation.
            </summary>
            
        </member>
        <member name="M:System.AggregateException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.AggregateException"/> class.
            </summary>
            
        </member>
        <member name="M:System.AggregateException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:System.AggregateException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:System.AggregateException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:System.AggregateException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:System.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:System.AggregateException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
              that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
              that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            
        </member>
        <member name="T:Accord.ThreadLocal`1">
            <summary>
              Minimum ThreadLocal implementation for .NET 3.5 to make
              Accord.NET work. This is not a complete implementation.
            </summary>
            
        </member>
        <member name="M:Accord.ThreadLocal`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.ThreadLocal`1"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.ThreadLocal`1.#ctor(System.Func{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.ThreadLocal`1"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.ThreadLocal`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Accord.ThreadLocal`1"/> is reclaimed by garbage collection.
            </summary>
            
        </member>
        <member name="M:Accord.ThreadLocal`1.Dispose">
            <summary>
              Performs application-defined tasks associated with 
              freeing, releasing, or resetting unmanaged resources.
            </summary>
            
        </member>
        <member name="M:Accord.ThreadLocal`1.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources
            </summary>
            
            <param name="disposing"><c>true</c> to release both managed and unmanaged
              resources; <c>false</c> to release only unmanaged resources.</param>
            
        </member>
        <member name="P:Accord.ThreadLocal`1.Value">
            <summary>
              Gets or sets the value.
            </summary>
            
        </member>
        <member name="T:Accord.Tuple`2">
            <summary>
              Minimum Tuple implementation for .NET 3.5 to
              make Accord.NET work. This is not a complete implementation.
            </summary>
            
        </member>
        <member name="M:Accord.Tuple`2.#ctor(`0,`1)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Tuple`2"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Tuple`2.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:Accord.Tuple`2.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            
        </member>
        <member name="P:Accord.Tuple`2.Item1">
            <summary>
              Gets or sets the item 1.
            </summary>
            
        </member>
        <member name="P:Accord.Tuple`2.Item2">
            <summary>
              Gets or sets the item 2.
            </summary>
            
        </member>
        <member name="T:Accord.Tuple`3">
            <summary>
              Minimum Tuple implementation for .NET 3.5 to
              make Accord.NET work. This is not a complete implementation.
            </summary>
            
        </member>
        <member name="M:Accord.Tuple`3.#ctor(`0,`1,`2)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Tuple`3"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Tuple`3.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
              
        </member>
        <member name="M:Accord.Tuple`3.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            
        </member>
        <member name="P:Accord.Tuple`3.Item1">
            <summary>
              Gets or sets the item 1.
            </summary>
        </member>
        <member name="P:Accord.Tuple`3.Item2">
            <summary>
              Gets or sets the item 2.
            </summary>
            
        </member>
        <member name="P:Accord.Tuple`3.Item3">
            <summary>
              Gets or sets the item 3.
            </summary>
            
        </member>
        <member name="T:Accord.Tuple">
            <summary>
              Minimum Tuple implementation for .NET 3.5 to
              make Accord.NET work. This is not a complete implementation.
            </summary>
            
        </member>
        <member name="M:Accord.Tuple.Create``2(``0,``1)">
            <summary>
              Creates the specified tuple.
            </summary>
            
        </member>
        <member name="M:Accord.Tuple.Create``3(``0,``1,``2)">
            <summary>
              Creates the specified tuple.
            </summary>
            
        </member>
        <member name="T:System.Collections.Generic.SortedSet`1">
            <summary>
              Minimum SortedSet implementation for .NET 3.5 to
              make Accord.NET work. This is not a complete implementation.
            </summary>
            
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedSet`1"/> class.
            </summary>
            
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
            <summary>
              Determines whether the set contains the specified value.
            </summary>
            
            <param name="value">The value.</param>
            
            <returns>
              <c>true</c> if this object contains the specified value; otherwise, <c>false</c>.
            </returns>
            
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
            <summary>
              Adds the specified value.
            </summary>
            
            <param name="value">The value.</param>
            
        </member>
        <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
            <summary>
              Gets the enumerator.
            </summary>
            
        </member>
        <member name="T:Accord.NonSymmetricMatrixException">
            <summary>
              Non-Symmetric Matrix Exception.
            </summary>
            
            <remarks><para>The not symmetric matrix exception is thrown in cases where a method 
            expects a matrix to be symmetric but it is not.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.NonSymmetricMatrixException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonSymmetricMatrixException"/> class.
            </summary>
        </member>
        <member name="M:Accord.NonSymmetricMatrixException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonSymmetricMatrixException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:Accord.NonSymmetricMatrixException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonSymmetricMatrixException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:Accord.NonSymmetricMatrixException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.NonSymmetricMatrixException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            
        </member>
        <member name="T:Accord.SpinLock">
            <summary>
              Minimum SpinLock implementation for .NET 3.5 to make
              Accord.NET work. This is not a complete implementation.
            </summary>
            
        </member>
        <member name="M:Accord.SpinLock.Enter(System.Boolean@)">
            <summary>
              Acquires the lock.
            </summary>
            
        </member>
        <member name="M:Accord.SpinLock.Exit">
            <summary>
              Releases the lock.
            </summary>
            
        </member>
        <member name="P:Accord.SpinLock.IsHeld">
            <summary>
              Gets whether the lock is currently held by any thread.
            </summary>
            
        </member>
        <member name="T:Accord.ConvergenceException">
            <summary>
              Algorithm Convergence Exception.
            </summary>
            
            <remarks><para>The algorithm convergence exception is thrown in cases where a iterative
            algorithm could not converge to a finite solution.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.ConvergenceException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.ConvergenceException"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.ConvergenceException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.ConvergenceException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:Accord.ConvergenceException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.ConvergenceException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:Accord.ConvergenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.ConvergenceException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            
        </member>
        <member name="T:Accord.ReadOnlyDictionary`2">
            <summary>
              Read-only dictionary wrapper.
            </summary>
            
            <remarks>
              This collection implements a read-only dictionary. Read-only collections
              can not be changed once they are created and are useful for presenting
              information to the user without allowing alteration.
            </remarks>
            
            <typeparam name="TKey">The types of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            
        </member>
        <member name="M:Accord.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
              Constructs a new read-only wrapper around a <see cref="T:Accord.ReadOnlyDictionary`2"/>.
            </summary>
            
            <param name="dictionary">The dictionary to wrap.</param>
            
        </member>
        <member name="M:Accord.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
              Does nothing, as this collection is read-only.
            </summary>
            
        </member>
        <member name="M:Accord.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
              Determines whether the <see cref="T:Accord.ReadOnlyDictionary`2"/>
              contains an element with the specified key.
            </summary>
            
            <param name="key">The key to locate in the <see cref="T:Accord.ReadOnlyDictionary`2"/>.</param>
            
            <returns>
               <c>true</c> if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains
                an element with the key; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
              Does nothing, as this collection is read-only.
            </summary>
            
        </member>
        <member name="M:Accord.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
               Gets the value associated with the specified key.
            </summary>
            
            <param name="key">The key whose value to get.</param>
            
            <param name="value">
               When this method returns, the value associated with the specified key, if
               the key is found; otherwise, the default value for the type of the value
               parameter. This parameter is passed uninitialized.</param>
               
            <returns>
                true if the <see cref="T:Accord.ReadOnlyDictionary`2"/>
                contains an element with the specified key; otherwise, false.</returns>
                
        </member>
        <member name="M:Accord.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Does nothing, as this collection is read-only.
            </summary>
            
        </member>
        <member name="M:Accord.ReadOnlyDictionary`2.Clear">
            <summary>
              Does nothing, as this collection is read-only.
            </summary>
            
        </member>
        <member name="M:Accord.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Determines whether the <see cref="T:Accord.ReadOnlyDictionary`2"/>
              contains an element with the specified key.
            </summary>
            
            <param name="item">The key to locate in the <see cref="T:Accord.ReadOnlyDictionary`2"/>.</param>
            
            <returns>
              <c>true</c> if the <see cref="T:Accord.ReadOnlyDictionary`2"/>
              contains an element with the key; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
              Copies the entire <see cref="T:Accord.ReadOnlyDictionary`2"/> to a 
              compatible one-dimensional Array, starting at the specified index of 
              the target array.
            </summary>
            
            <param name="array">
              The one-dimensional Array that is the destination
              of the elements copied from <see cref="T:Accord.ReadOnlyDictionary`2"/>. The 
              Array must have zero-based indexing.</param>
            
            <param name="arrayIndex">
              The zero-based index in array at which copying begins. </param>
            
        </member>
        <member name="M:Accord.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
              Does nothing, as this collection is read-only.
            </summary>
            
        </member>
        <member name="M:Accord.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="P:Accord.ReadOnlyDictionary`2.Keys">
            <summary>
              Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of
              the <see cref="T:Accord.ReadOnlyDictionary`2"/>.
            </summary>
            
            <value>The keys.</value>
            
        </member>
        <member name="P:Accord.ReadOnlyDictionary`2.Values">
            <summary>
             Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in
             the <see cref="T:Accord.ReadOnlyDictionary`2"/>.
            </summary>
            
            <value>
              An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the
              values in the <see cref="T:Accord.ReadOnlyDictionary`2"/>.
             </value>
             
        </member>
        <member name="P:Accord.ReadOnlyDictionary`2.Item(`0)">
            <summary>
              Gets the element with the specified key. Set is not supported.
            </summary>
            
            <value>The element with the specified key.</value>
            
        </member>
        <member name="P:Accord.ReadOnlyDictionary`2.Count">
            <summary>
              Gets the number of elements contained in this
              <see cref="T:Accord.ReadOnlyDictionary`2"/>.
            </summary>
            
        </member>
        <member name="P:Accord.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
              Always returns true.
            </summary>
            
        </member>
        <member name="T:Accord.SingularMatrixException">
            <summary>
              Singular Matrix Exception.
            </summary>
            
            <remarks><para>The singular matrix exception is thrown in cases where a method which
            performs matrix inversions has encountered a non-invertible matrix during the process.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.SingularMatrixException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.SingularMatrixException"/> class.
            </summary>
        </member>
        <member name="M:Accord.SingularMatrixException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.SingularMatrixException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:Accord.SingularMatrixException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.SingularMatrixException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            
        </member>
        <member name="M:Accord.SingularMatrixException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.SingularMatrixException"/> class.
            </summary>
            
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
            
        </member>
        <member name="T:System.Threading.Tasks.Parallel">
            <summary>
              Minimum Parallel Tasks implementation for .NET 3.5 to make
              Accord.NET work. This is nowhere a functional implementation
              and exists only to provide compile-time compatibility with
              previous framework versions.
            </summary>
            
        </member>
        <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.Parallel.ForLoopBody)">
            <summary>
              Parallel for mock-up. The provided
              code will NOT be run in parallel.
            </summary>
            
        </member>
        <member name="T:System.Threading.Tasks.Parallel.ForLoopBody">
            <summary>
              Loop body delegate.
            </summary>
            
        </member>
    </members>
</doc>
