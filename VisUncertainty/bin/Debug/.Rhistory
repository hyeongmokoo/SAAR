c("1960", "1940"))
tab
dth40
pop40
dth60
pop60
isr <- ageadjust.indirect(count = dth40, pop = pop40,
stdcount = dth60, stdpop = pop60)
round(isr$sir, 2)         ##standarized incidence ratio
round(100000*isr$rate, 1) ##rate per 100,000 per year
dsr <- ageadjust.direct(count,population,stdpop=standard)
round(100000*dsr, 1) ##rate per 100,000 per year
std.count <- c(7200,16000,40000,72000,140000)
std.pop <- c(12000000,16000000,20000000,24000000,28000000)
dth40
std.count <- c(7200,16000,40000,72000,140000)
std.pop <- c(12000000,16000000,20000000,24000000,28000000)
count <- c(556)
pop<-c(10000,20000,30000,40000,50000)
isr <- ageadjust.indirect(count = count, pop = pop,
stdcount = std.count, stdpop = std.pop)
ageadjust.indirect
round(isr$sir, 2)         ##standarized incidence ratio
round(100000*isr$rate, 1) ##rate per 100,000 per year
rm(list=ls(all=TRUE))
library("epitools")
population <- c(10000,20000,30000,40000,50000)
count <- c(6,15,75,160,300)
standard<-c(12000000,16000000,20000000,24000000,28000000)
dsr <- ageadjust.direct(count,population,stdpop=standard)
round(100000*dsr, 2) ##rate per 100,000
std.count <- c(7200,16000,40000,72000,140000)
std.pop <- c(12000000,16000000,20000000,24000000,28000000)
count <- c(556)
pop<-c(10000,20000,30000,40000,50000)
isr <- ageadjust.indirect(count = count, pop = pop,
stdcount = std.count, stdpop = std.pop)
round(isr$sir, 2)         ##standarized incidence ratio
round(100000*isr$rate, 1) ##rate per 100,000
population <- c(10000,20000,30000,40000,50000, 10)
count <- c(6,15,75,160,300, 1)
standard<-c(12000000,16000000,20000000,24000000,28000000, 10000000)
dsr <- ageadjust.direct(count,population,stdpop=standard)
round(100000*dsr, 2) ##rate per 100,000
std.count <- c(7200,16000,40000,72000,140000,100000)
std.pop <- c(12000000,16000000,20000000,24000000,28000000, 10000000)
pop<-c(10000,20000,30000,40000,50000, 10)
isr <- ageadjust.indirect(count = count, pop = pop,
stdcount = std.count, stdpop = std.pop)
round(isr$sir, 2)         ##standarized incidence ratio
round(100000*isr$rate, 1) ##rate per 100,000
population <- c(10000,20000,30000,40000,50000, 10)
count <- c(6,15,75,160,300, 1)
standard<-c(12000000,16000000,20000000,24000000,28000000, 10000000)
dsr <- ageadjust.direct(count,population,stdpop=standard)
round(100000*dsr, 2) ##rate per 100,000
std.count <- c(7200,16000,40000,72000,140000,100000)
std.pop <- c(12000000,16000000,20000000,24000000,28000000, 10000000)
count <- c(557)
pop<-c(10000,20000,30000,40000,50000, 10)
isr <- ageadjust.indirect(count = count, pop = pop,
stdcount = std.count, stdpop = std.pop)
round(isr$sir, 2)         ##standarized incidence ratio
round(100000*isr$rate, 1) ##rate per 100,000
rm(list=ls(all=TRUE))
library("CancerSEA")
data(cancer)
library(CancerSEA)
data(cancer)
data(cancer);data(mig)
cancer
disease.glm3 <- glm(L_WM_P2_CN~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, family=poisson(link="log"))
summary(disease.glm3)
poi.glm <- glm(L_WM_P2_CN~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, family=poisson(link="log"))
summary(poi.glm)
L_WM_P2_CN
cancer$L_WM_P2_CN
cancer$L_WM_P2_EX
poi.glm <- glm(L_WM_P2_CN~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, offset=log(L_WM_P2_EX), data=cancer, family=poisson(link="log"))
summary(poi.glm)
poi.glm <- glm(L_WM_P2_CN~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, offset=log(L_WM_P2_EX), data=cancer, family=poisson(link="log"))
summary(poi.glm)
poi.glm1 <- glm(L_WM_P2_CN~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, family=poisson(link="log"))
summary(poi.glm1)
bino.glm <- glm(L_WM_P2_RT/1000~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weight=POPATRISK1982, family=binomial)
bino.glm <- glm(L_WM_P2_RT/100000~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weight=POPATRISK1982, family=binomial)
L_WM_P2_RT/100000
cancer$L_WM_P2_RT/100000
cancer$POPATRISK1982
rate <- cancer$L_WM_P2_RT/100000
prob <- cancer$L_WM_P2_RT/100000
bino.glm <- glm(prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weight=POPATRISK1982, family=binomial)
rm(list=ls(all=TRUE))                        # Start with clean workspace
setwd("D:\\GoogleDrive\\UTD\\2018spring\\GISC 7364_Demographic\\Lecture03")
library(maptools)
options(contrasts=c("contr.treatment","contr.poly"))
getinfo.shape("GlasgowShape.shp")
ig.shp <- readShapePoly("GlasgowShape.shp",IDvar="ID",
proj4string=CRS("+proj=longlat"))
summary(ig.shp)                           # Check data in SpatialPolygonDataFrame
idx.max <- which.max(ig.shp$CRIME)        # Get inndex of a record with "outlying" observation (other approaches possible)
ig.shp@data[idx.max,"CRIME"] <- 726       # Or change value or change its value within the shapefile
idx.max <- which.max(ig.shp$ASSAULT)
ig.shp@data[idx.max,"ASSAULT"] <- 180
summary(ig.shp)                           # Check update
ig.bbox <- bbox(ig.shp)                   # Get bounding box
ig.centroid <- coordinates(ig.shp)        # Get centroids
ig.shp$Rate2009 <- ig.shp$OBSRES2009/ig.shp$POP2001
hist(ig.shp$Rate2009)
disease.glm1 <- glm(Rate2009~INCOMEDEP+TYPE, data=ig.shp, weight=POP2001, family=binomial)
bino.glm <- glm(prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weights=POPATRISK1982, family=binomial)
rm(list=ls(all=TRUE))
library(CancerSEA)
data(cancer);data(mig)
poi.glm <- glm(L_WM_P2_CN~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, offset=log(L_WM_P2_EX), data=cancer, family=poisson(link="log"))
summary(poi.glm)
prob <- cancer$L_WM_P2_RT/100000
bino.glm <- glm(prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weights=POPATRISK1982, family=binomial)
bino.glm <- glm(prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weights=POPATRISK1982, family=binomial)
prob <- cancer$L_WM_P2_RT/100000
disease.glm1 <- glm(prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weight=POPATRISK1982, family=binomial)
bino.glm <- glm(prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weights=POPATRISK1982, family=binomial)
summary(bino.glm)
summary(poi.glm)
rm(list=ls(all=TRUE))                        # Start with clean workspace
setwd("D:\\GoogleDrive\\UTD\\2018spring\\GISC 7364_Demographic\\Lecture03")
library(maptools)
options(contrasts=c("contr.treatment","contr.poly"))
getinfo.shape("GlasgowShape.shp")
ig.shp <- readShapePoly("GlasgowShape.shp",IDvar="ID",
proj4string=CRS("+proj=longlat"))
rm(list=ls(all=TRUE))                        # Start with clean workspace
setwd("D:\\GoogleDrive\\UTD\\2018spring\\GISC 7364_Demographic\\Lecture03")
library(maptools)
getinfo.shape("GlasgowShape.shp")
ig.shp <- readShapePoly("GlasgowShape.shp",IDvar="ID",
proj4string=CRS("+proj=longlat"))
summary(ig.shp)                           # Check data in SpatialPolygonDataFrame
idx.max <- which.max(ig.shp$CRIME)        # Get inndex of a record with "outlying" observation (other approaches possible)
ig.shp@data[idx.max,"CRIME"] <- 726       # Or change value or change its value within the shapefile
idx.max <- which.max(ig.shp$ASSAULT)
ig.shp@data[idx.max,"ASSAULT"] <- 180
summary(ig.shp)                           # Check update
ig.bbox <- bbox(ig.shp)                   # Get bounding box
ig.centroid <- coordinates(ig.shp)        # Get centroids
ig.shp$Rate2009 <- ig.shp$OBSRES2009/ig.shp$POP2001
hist(ig.shp$Rate2009)
disease.glm1 <- glm(Rate2009~INCOMEDEP+TYPE, data=ig.shp, weight=POP2001, family=binomial)
summary(disease.glm1)
disease.glm0 <- glm(cbind(ig.shp$OBSRES2009, ig.shp$POP2001 - ig.shp$OBSRES2009) ~INCOMEDEP+TYPE, data=ig.shp, family=binomial)
summary(disease.glm0)
disease.glm1 <- glm(L_WM_P2_RT~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weight=POPATRISK1982, family=binomial)
prob <- cancer$L_WM_P2_RT/100000
cancer$L_WM_P2_prob <- cancer$L_WM_P2_RT/100000
disease.glm1 <- glm(L_WM_P2_prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weight=POPATRISK1982, family=binomial)
disease.glm1 <- glm(L_WM_P2_prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weight=POPATRISK1982, family=quasibinomial)
summary(disease.glm1)
bino.glm <- glm(L_WM_P2_prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weights=POPATRISK1982, family=binomial)
summary(bino.glm)
poi.glm <- glm(L_WM_P2_CN~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, offset=log(L_WM_P2_EX), data=cancer, family=poisson(link="log"))
summary(poi.glm)
cancer$L_WM_P2_prob
cancer$L_WM_P2_RT
cancer$EX <- cancer$L_WM_P2_prob*cancer$POPATRISK1982
disease.glm1 <- glm(cbind(EX, POPATRISK1982-EX)~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, family=quasibinomial)
summary(disease.glm1)
bino.glm <- glm(L_WM_P2_prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weights=POPATRISK1982, family=binomial)
summary(bino.glm)
disease.glm1 <- glm(cbind(EX, POPATRISK1982-EX)~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, family=quasibinomial)
summary(disease.glm1)
cancer$L_WM_P2_prob <- cancer$L_WM_P2_RT/100000
bino.glm <- glm(L_WM_P2_prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weights=POPATRISK1982, family=binomial)
summary(bino.glm)
disease.glm1 <- glm(L_WM_P2_prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weight=POPATRISK1982, family=quasibinomial)
summary(disease.glm1)
disease.glm1 <- glm(L_WM_P2_prob~URBRUR+RAD_MD+I(RAD_MD^2)+TOBACCO, data=cancer, weight=POPATRISK1982, family=binomial)
summary(disease.glm1)
lowCount <- matrix(c(3,7,6,9),nrow=2)
lowCount                                                 # Low counts
(low.test <- chisq.test(lowCount, correct=F))            # Notice warning
low.test$expected                                        # Low expected counts
chisq.test(lowCount, simulate.p.value=T)                 # Get p-value through simulation
hiCount <- lowCount*100
hiCount
(hi.test <- chisq.test(hiCount, correct=F))              # chi-square increased by 100
hi.test$expected
rm(list=ls())
setwd("D:\\GoogleDrive\\UTD\\2018spring\\GISC 7364_Demographic\\Lecture05")
TX <- foreign::read.dbf("TexasSexByAge2000.dbf")
setwd("D:\\GoogleDrive\\UTD\\2018spring\\GISC 7364_Demographic\\Lecture05")
TX <- foreign::read.dbf("TexasSexByAge2000.dbf")
library(foreign)
setwd("D:\\GoogleDrive\\UTD\\2018spring\\GISC 7364_Demographic\\Lecture05")
TX <- foreign::read.dbf("TexasSexByAge2000.dbf")
rm(list=ls())
setwd("D:\\GoogleDrive\\UTD\\2018spring\\GISC 7364_Demographic\\4Lecture05")
setwd("D:\\GoogleDrive\\UTD\\2018spring\\GISC 7364_Demographic\\Lecture04")
TX <- foreign::read.dbf("TexasSexByAge2000.dbf")
TX <- TX[,-(1:2)]                                       # Drop non-numeric info
TX <- as.matrix(TX)
TXPop <- apply(TX,2,sum)                                # Total pop in age groups for TX
refPop <- TXPop[1:19]                                   # Male distribution is the comparison group
testPop <- TXPop[20:38]                                 # Female distrbution is the test group
chisq.test(testPop, p=refPop, rescale.p=T)
testPop <- testPop/sum(testPop) * 1000
chisq.test(testPop, p=refPop, rescale.p=T)
View(TX)
TXPop
chisq.test(refPop, p=testPop, rescale.p=T)
chisq.test(testPop, p=refPop, rescale.p=T)
refPop <- TXPop[1:19]                                   # Male distribution is the comparison group
testPop <- TXPop[20:38]                                 # Female distrbution is the test group
chisq.test(testPop, p=refPop, rescale.p=T)
chisq.test(refPop, p=testPop, rescale.p=T)
install.packages("LifeTables")
library(LifeTables)
library(LifeTables)
data(MLTobs)
test.mx.m <- mlt.mx[,1]
View(mlt.mx)
lt.mx(nmx=test.mx.m, sex="male")
test.mx.m
lt.mx(nmx=test.mx.m, sex="male")
test.mx.f <- flt.mx[1:19,1] ## ages 0-85
lt.mx(nmx=test.mx.f, sex="female", age=c(0,1,seq(5,85,5)))
test.mx.f
lt.mx(nmx=test.mx.m, sex="male")
mx.examp <- exp(mortmod(pattern=1, alpha=.05, sex="male"))
plotMLT(mx.out=mx.examp, sex="male", lt.col="All")
plotMLT(mx.out=mx.examp, sex="male", lt.col=3, log=TRUE)
rm(list=ls(all=TRUE))
library(spdep); library(maptools)
setwd("D:/GoogleDrive/Projects/2014/NIH_withDrChun_DrGriffith/Programmings/VisUncertainty/VisUncertainty/bin/Debug")
source("AllFunctions_LeeL.R")
nb.self <- function (nb) {
# purpose: Making non-zero diagonal elements in spatial proximity matrix
# Arguments:
#   nb: nb object
# Author: Yongwan Chun
n <- length(nb)
for (i in 1:n) nb[[i]] <- sort(c(i,nb[[i]]))
return(nb)
}
add.nblags <- function(nblags){
nlags <- length(nblags)
n <- length(nblags[[1]])
for(i in 2:nlags){
for(j in 1:n){
nblags[[i]][[j]] <- as.integer(sort(c(nblags[[i-1]][[j]],nblags[[i]][[j]])))
}
}
nblags
}
nb2listv <- function(neighbours, beta=0.5){
style <- 'V'
neighbours <- nb.self(sample.nb)
n <- length(neighbours)
cardnb <- card(neighbours)
vlist <- vector(mode = "list", length = n)
glist <- vector(mode = "list", length = n)
for (i in 1:n) if (cardnb[i] > 0) {
glist[[i]] <- rep(1, length = cardnb[i])
mode(glist[[i]]) <- "numeric"
}
d <- unlist(lapply(glist, sum))-1
for (i in 1:n) {
if (cardnb[i] > 0) {
if (d[i] > 0) {
vlist[[i]] <- ((1-beta)/d[i]) * glist[[i]]
self.idx <- which(neighbours[[i]]==i)
vlist[[i]][self.idx] <- beta
}
else vlist[[i]] <- 0 * glist[[i]]
}
}
attr(vlist, "comp") <- list(d = d)
res <- list(style = style, neighbours = neighbours, weights = vlist)
class(res) <- c("listw", "nb")
attr(res, "region.id") <- attr(neighbours, "region.id")
attr(res, "call") <- match.call()
res
}
L.global.test <- function(x, y, nb, style="W", alternative="two.sided", diag.zero=FALSE){
# purpose: Calculate Global Lee's L and test statistic under randomization
# Arguments:
#   x: a vector of one variable
#   y: a vector of another variable
#   nb: nb object
#   style: style of spatial weight matrix (refer to nb2listw)
#   alternatie: type of test
#   diag.zero: if FALSE, each region has itself as its neighbour
# Fuction called:
#   nb.self
alternative <- match.arg(alternative, c("greater", "less", "two.sided"))
style <- match.arg(style, c("B","C","S","W","U"))
mf <- match.call(expand.dots = FALSE)
# making non-zero diagonal elements in a spatial weight matrix
if (diag.zero == FALSE) nb <- nb.self(nb)
#listw <- nb2listw(nb,style=style)
listw <- nb2listv(nb, 0.5)
#	if (style != "W") {
#   lee.l <- (n/nw)*lee.l
#	}
# caluculating L statistic
W <- as(as(as_dgRMatrix_listw(listw), "RsparseMatrix"), "CsparseMatrix")
nw <- sum(rowSums(W)^2)
n <- length(x)
d.x <- x - mean(x)
d.y <- y - mean(y)
z.x <- as.matrix(d.x/(sqrt(sum(d.x^2)/n)))
z.y <- as.matrix(d.y/(sqrt(sum(d.y^2)/n)))
lx <- lag.listw(listw,d.x)
ly <- lag.listw(listw,d.y)
lee.l <- (n/nw)*sum(lx*ly)/(sqrt(sum((d.x)^2)) * sqrt(sum((d.y)^2)))
# Calculating a reference distribution
W <- crossprod(W)
W <- W/sum(W)
W <- (W + t(W))/2
p.on <- diag(W)
p.rs <- rowSums(W)
f2.all <- sum(p.rs^2)
f2.on <- sum(p.on*p.rs)
f0.on <- sum(p.on)
f1.on <- sum(p.on^2)
diag(W) <- 0
f0.off <- sum(W)
f1.off <- sum(W^2)
f2.off <- sum(rowSums(W)^2)
f0.all <- f0.off + f0.on
f1.all <- f1.off + f1.on
q.rs <- rep(0,n)
g1.off <- 0
for (i in 1:n) {
q.i <- ((z.x%*%z.y[i]+z.y%*%z.x[i])/2)[-i]
q.rs[i] <- sum(q.i)
g1.off <- g1.off + sum(q.i^2)
}
g0.off <- sum(q.rs)
g2.off <- sum(q.rs^2)
q.on <- z.x * z.y
g0.on <- sum(q.on)
g1.on <- sum(q.on^2)
g2.on <- sum(q.on*q.rs)
g0.all <- g0.off + g0.on
g1.all <- g1.off + g1.on
g2.all <- sum((q.rs + q.on)^2)
# Expected values
E.L.off <- (f0.off*g0.off)/(n*(n-1))
E.L.on <- (f0.on*g0.on)/n
E.L <- E.L.off + E.L.on
# Variance
VAR.L.off <- ((2*f1.off*g1.off)/(n*(n-1)))+((4*(f2.off-f1.off)*(g2.off-g1.off))/(n*(n-1)*(n-2)))+ ((((f0.off^2)+(2*f1.off)-(4*f2.off))*((g0.off^2)+(2*g1.off)-(4*g2.off)))/(n*(n-1)*(n-2)*(n-3)))-(E.L.off^2)
VAR.L.on <- (f1.on*g1.on/n)+(((f0.on^2-f1.on)*(g0.on^2-g1.on))/(n*(n-1)))-(E.L.on^2)
COV.1 <- ((f2.all-f1.on-f2.off)*(g2.all-g1.on-g2.off))/(2*n*(n-1))
COV.2 <- (((f0.on*f0.off)-(f2.all-f1.on-f2.off))*((g0.on*g0.off)-(g2.all-g1.on-g2.off)))/(n*(n-1)*(n-2))
COV.L <- (COV.1+COV.2)-(E.L.off*E.L.on)
COV.L.2 <- 2*COV.L
VAR.L <- VAR.L.off + VAR.L.on + COV.L.2
SD.L <- sqrt(VAR.L)
Z.L <- (lee.l - E.L)/SD.L
# Calculation p-values
if (alternative=="two.sided")
P.L <- 2 * pnorm(abs(Z.L), lower.tail = FALSE)
else if (alternative=="greater")
P.L <- pnorm(Z.L, lower.tail = FALSE)
else P.L <- pnorm(Z.L)
statistic <- Z.L
attr(statistic, "names") <- "Lee's L statistic standard deviate"
p.value <- P.L
estimate <- c(lee.l, E.L, VAR.L)
attr(estimate, "names") <- c("Observed Lee's L", "Expectation","Variance")
method <- "Global Lee's L test under randomization"
if (diag.zero==FALSE) style <- paste(style, "*",sep="")
data.name <- paste(deparse(mf[[2]]), " & ",  deparse(mf[[3]]), "\nweights: ",  deparse(mf[[4]]), ", style: ", style, "\n", sep = "")
res <- list(statistic = statistic, p.value = p.value, estimate = estimate,
method = method, alternative = alternative, data.name = data.name)
class(res) <- "htest"
res
}
L.global.test.v <- function(x, y, nb, beta=0.5, alternative="two.sided", diag.zero=FALSE){
# purpose: Calculate Global Lee's L and test statistic under randomization
# Arguments:
#   x: a vector of one variable
#   y: a vector of another variable
#   nb: nb object
#   style: style of spatial weight matrix (refer to nb2listw)
#   alternatie: type of test
#   diag.zero: if FALSE, each region has itself as its neighbour
# Fuction called:
#   nb.self
alternative <- match.arg(alternative, c("greater", "less", "two.sided"))
#style <- "match.arg(style, c("B","C","S","W","U", "V"))"
style <- 'V'
mf <- match.call(expand.dots = FALSE)
# making non-zero diagonal elements in a spatial weight matrix
if (diag.zero == FALSE) nb <- nb.self(nb)
listw <- nb2listv(nb,beta)
#	if (style != "W") {
#   lee.l <- (n/nw)*lee.l
#	}
# caluculating L statistic
W <- as(as(as_dgRMatrix_listw(listw), "RsparseMatrix"), "CsparseMatrix")
nw <- sum(rowSums(W)^2)
n <- length(x)
d.x <- x - mean(x)
d.y <- y - mean(y)
z.x <- as.matrix(d.x/(sqrt(sum(d.x^2)/n)))
z.y <- as.matrix(d.y/(sqrt(sum(d.y^2)/n)))
lx <- lag.listw(listw,d.x)
ly <- lag.listw(listw,d.y)
lee.l <- (n/nw)*sum(lx*ly)/(sqrt(sum((d.x)^2)) * sqrt(sum((d.y)^2)))
# Calculating a reference distribution
W <- crossprod(W)
W <- W/sum(W)
W <- (W + t(W))/2
p.on <- diag(W)
p.rs <- rowSums(W)
f2.all <- sum(p.rs^2)
f2.on <- sum(p.on*p.rs)
f0.on <- sum(p.on)
f1.on <- sum(p.on^2)
diag(W) <- 0
f0.off <- sum(W)
f1.off <- sum(W^2)
f2.off <- sum(rowSums(W)^2)
f0.all <- f0.off + f0.on
f1.all <- f1.off + f1.on
q.rs <- rep(0,n)
g1.off <- 0
for (i in 1:n) {
q.i <- ((z.x%*%z.y[i]+z.y%*%z.x[i])/2)[-i]
q.rs[i] <- sum(q.i)
g1.off <- g1.off + sum(q.i^2)
}
g0.off <- sum(q.rs)
g2.off <- sum(q.rs^2)
q.on <- z.x * z.y
g0.on <- sum(q.on)
g1.on <- sum(q.on^2)
g2.on <- sum(q.on*q.rs)
g0.all <- g0.off + g0.on
g1.all <- g1.off + g1.on
g2.all <- sum((q.rs + q.on)^2)
# Expected values
E.L.off <- (f0.off*g0.off)/(n*(n-1))
E.L.on <- (f0.on*g0.on)/n
E.L <- E.L.off + E.L.on
# Variance
VAR.L.off <- ((2*f1.off*g1.off)/(n*(n-1)))+((4*(f2.off-f1.off)*(g2.off-g1.off))/(n*(n-1)*(n-2)))+ ((((f0.off^2)+(2*f1.off)-(4*f2.off))*((g0.off^2)+(2*g1.off)-(4*g2.off)))/(n*(n-1)*(n-2)*(n-3)))-(E.L.off^2)
VAR.L.on <- (f1.on*g1.on/n)+(((f0.on^2-f1.on)*(g0.on^2-g1.on))/(n*(n-1)))-(E.L.on^2)
COV.1 <- ((f2.all-f1.on-f2.off)*(g2.all-g1.on-g2.off))/(2*n*(n-1))
COV.2 <- (((f0.on*f0.off)-(f2.all-f1.on-f2.off))*((g0.on*g0.off)-(g2.all-g1.on-g2.off)))/(n*(n-1)*(n-2))
COV.L <- (COV.1+COV.2)-(E.L.off*E.L.on)
COV.L.2 <- 2*COV.L
VAR.L <- VAR.L.off + VAR.L.on + COV.L.2
SD.L <- sqrt(VAR.L)
Z.L <- (lee.l - E.L)/SD.L
# Calculation p-values
if (alternative=="two.sided")
P.L <- 2 * pnorm(abs(Z.L), lower.tail = FALSE)
else if (alternative=="greater")
P.L <- pnorm(Z.L, lower.tail = FALSE)
else P.L <- pnorm(Z.L)
statistic <- Z.L
attr(statistic, "names") <- "Lee's L statistic standard deviate"
p.value <- P.L
estimate <- c(lee.l, E.L, VAR.L)
attr(estimate, "names") <- c("Observed Lee's L", "Expectation","Variance")
method <- "Global Lee's L test under randomization"
if (diag.zero==FALSE) style <- paste(style, "*",sep="")
data.name <- paste(deparse(mf[[2]]), " & ",  deparse(mf[[3]]), "\nweights: ",  deparse(mf[[4]]), ", style: ", style, "\n", sep = "")
res <- list(statistic = statistic, p.value = p.value, estimate = estimate,
method = method, alternative = alternative, data.name = data.name)
class(res) <- "htest"
res
}
sample.shp <- readShapePoly("SampleData/Texas/tl_2014_tx_cnt_SP.shp")
sample.df <- as.data.frame(sample.shp)
sample.nb <- poly2nb(sample.shp)
sum(card(sample.nb))
sample.listv <- nb2listv(nb.self(sample.nb), 0.5)
sample.nblags <- nblag(sample.nb, 6)
summary(sample.nblags[[3]])
sample.nblags.star <- add.nblags(sample.nblags)
summary(sample.nblags.star[[2]])
sample.v1 <- sample.df$medinc
sample.v2 <- sample.df$p_edu
cor(sample.v1, sample.v2)
sample.l <- L.local.test(sample.v1, sample.v2, 1:length(sample.nb), sample.nb, style='W', sig.levels=c(0.10), method='Conditional', alternative='two.sided', diag.zero=FALSE)
sample.g <- L.global.test(sample.v1, sample.v2, sample.nb, style="W", alternative="two.sided", diag.zero=FALSE)
sample.g <- L.global.test.v(sample.v1, sample.v2, sample.nb, beta = 0.5, alternative="two.sided", diag.zero=FALSE)
sample.g$statistic
sample.g$estimate
sample.g$p.value
sample.chr <- as.character(sample.l$sig)
plot(sample.l$sma.z.y~ sample.l$sma.z.x)
plot(sample.v1~sample.l$sma.z.x)
L.global(sample.v1, sample.v2, sample.nb, style="W", diag.zero=FALSE)
plot(0:8, 2:10, type="b", main="Spatial Co-clustogram", xlab="Spatial Ranges", ylab="Bivariate L* (Z-values)", lwd=1)
plot(scale(sample.v1)~sample.l$sma.z.x)
plot(sample.l$sma.z.y, sample.l$sma.z.x)
sma.x <- sample.l$sma.z.x
sma.y <- sample.l$sma.z.y
x <- scale(sample.v1)
y <- scale(sample.v2)
scatterplotMatrix(~x+y+sma.x+sma.y)
scatterplotMatrix(~x+y+sma.x+sma.y, smoother=F, transform=TRUE, data=Duncan)
scatterplotMatrix(~x+y+sma.x+sma.y, smoother=F, transform=TRUE)
scatterplotMatrix(~x+y+sma.x+sma.y, smoother=F)
library(MASS)
parcoord(rbind(x, y, sma.x, sma.y))
parcoord(cbind(x, y, sma.x, sma.y))
